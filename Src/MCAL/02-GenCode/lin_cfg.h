/** ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**
**     @file      lin_cfg.h
**
**     @date      11:04:39, 2021-12-21
**
**     @brief     Hardware configuration file
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016 - 2017 NXP
**     All Rights Reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/

/*!
 * @file lin_cfg.h
 *
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.3, A project should not contain unused type declarations.
 * The type can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, A project should not contain unused macro declarations.
 * The macro can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.1, External identifiers shall be distinct.
 * The identifiers are generated from signal names. The signal name is defined by users and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.2, Identifiers declared in the same scope and name
 * space shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.4, Macro identifiers shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.5, Identifier shall be distinct from macro names.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Directive 4.9, A function should be used in preference
 * to a function-like macro where they are interchangeable.
 * The macro is used to define static or dynamic implementation of API functions.
 * This way is more efficient.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 20.10, The #/ ## preprocessor operator should not be used.
 * The operator is used to define dynamic implementation of API functions of signal interaction.
 * This way is more efficient.
 */
#ifndef    LIN_CFG_H
#define    LIN_CFG_H

#include <stdint.h>
#include "lin_driver.h"
#include "lin1.h"

/* Implements    : SUPPORT_MASTER_MODE_Class */
#define SUPPORT_MASTER_MODE     1U /* Equal to 1 when have at least one master interface */
/* Implements    : SUPPORT_SLAVE_MODE_Class */
#define SUPPORT_SLAVE_MODE      0U  /* Equal to 1 when have at least one slave interface */

/* Implements    : SUPPORT_PROTOCOL_21_Class */
#define SUPPORT_PROTOCOL_21     1U /* Equal to 1 when have at least one LIN2.1 or LIN2.2 interface */
/* Implements    : SUPPORT_PROTOCOL_J2602_Class */
#define SUPPORT_PROTOCOL_J2602  0U /* Equal to 1 when have at least one J2602 interface */

/* Implements    : SUPPORT_DIAG_CLASS_III_Class */
#define SUPPORT_DIAG_CLASS_III  0U /* Equal to 1 when have at least one ifc with diagnostic class III */
/* Implements    : SUPPORT_DIAG_CLASS_II_Class */
#define SUPPORT_DIAG_CLASS_II   0U /* Equal to 1 when have at least one ifc with diagnostic class II or III */

/* Implements    : SUPPORT_TRANSPORT_LAYER_Class */
#define SUPPORT_TRANSPORT_LAYER 0U /* Equal to 1 to use transport layer */
/* Implements    : SUPPORT_DIAG_SERVICE_Class */
#define SUPPORT_DIAG_SERVICE    0U /* Equal to 1 to use diagnostic service layer */
#define TIME_OUT_UNIT_US 500U

#define HARDWARE_INSTANCE_COUNT    3U

#define LIN_NUM_OF_IFCS  1U
#define LIN_NUM_OF_SLAVE_IFCS 0U
#define LIN_NUM_OF_MASTER_IFCS 1U

/* frame buffer size */
#define LIN_FRAME_BUF_SIZE          173U
#define LIN_FLAG_BUF_SIZE           40U

/**********************************************************************/
/***************               Interfaces           *******************/
/**********************************************************************/
typedef enum {
   LI0 = 0x00U,
   INVALID_IFC = 0xFFU
}l_ifc_handle;

typedef enum {
   INVALID_SLAVE_INDEX = 0xFFU
}l_ifc_slave_handle;
typedef enum {
   LI0_Master = 0x00U,
   INVALID_MASTER_INDEX = 0xFFU
}l_ifc_master_handle;

/**********************************************************************/
/***************               Signals              *******************/
/**********************************************************************/
/* Number of signals */
#define LIN_NUM_OF_SIGS  205U
/* List of signals */
typedef enum {

   /* Interface_name = LI0 */

   LI0_TEMP_EAU_CPT_BT

   , LI0_I_CONSO_CTP_EAU_BT
  
   , LI0_DEFAUT_CTP_EAU
  
   , LI0_DEFAUT_SECU_CTP_EAU_BT
  
   , LI0_RESP_ERROR_CTPE
  
   , LI0_INTERLOCK_STATUS
  
   , LI0_LIMIT_POWER_HVWH
  
   , LI0_RESERV_2
  
   , LI0_DEFAUT_ALIM_BT
  
   , LI0_DEFAUT_FONCT_INTEMPESTIF
  
   , LI0_DEFAUT_NON_FONCT_PERM
  
   , LI0_DEFAUT_PROTECTION
  
   , LI0_DEFAUT_SONDE_TEMP
  
   , LI0_DEFAUT_TENSION_BT
  
   , LI0_TENSION_LV_CTPE_ELEC
  
   , LI0_RESERV_9
  
   , LI0_CMD_CTPE_EAU_BT
  
   , LI0_COUPURE_CONSO_CPT
  
   , LI0_CMD_PWR_LIMIT_HVWH
  
   , LI0_CDE_PV_LIN
  
   , LI0_RESERVE_8
  
   , LI0_RESERVE_16
  
   , LI0_RESERVE_16_2
  
   , LI0_RESERVE_16_3
  
   , LI0_CompSpd_Target
  
   , LI0_Comp_On_Rq
  
   , LI0_Comp_Fault_Clear_Rq
  
   , LI0_Comp_HvInterlock_Rq
  
   , LI0_Comp_HvDischarge_Rq
  
   , LI0_CompSpd_Est
  
   , LI0_EAC_HV_InputCurr
  
   , LI0_EAC_HV_Volt
  
   , LI0_EAC_InvrtTemp
  
   , LI0_EAC_InvrtPhaseCurr
  
   , LI0_EAC_Sp_BrdTemp_Lmt
  
   , LI0_EAC_Sp_CurrLmt
  
   , LI0_EAC_Sp_HVVolt_Flt
  
   , LI0_EAC_Sp_Temp_Excess
  
   , LI0_EAC_Sp_Comm_Flt
  
   , LI0_EAC_Sp_InvrtPwrSup_Flt
  
   , LI0_EAC_Off_Sens_Flt
  
   , LI0_EAC_Off_ShrtCurr
  
   , LI0_EAC_Off_Stall
  
   , LI0_EAC_RsErr
  
   , LI0_Comp_HvInterlock_Stat
  
   , LI0_Comp_Oprtn_Stat
  
   , LI0_BLOWER_DIAG_FLAG1
  
   , LI0_BLOWER_DIAG_FLAG2
  
   , LI0_BLOWER_IBATT
  
   , LI0_BLOWER_ResponseError
  
   , LI0_BLOWER_ROTATION_SPEED
  
   , LI0_BLOWER_STATUS_MOTOR
  
   , LI0_BLOWER_SUPPLIER
  
   , LI0_BLOWER_TEMPERATURE
  
   , LI0_BLOWER_TORQUE
  
   , LI0_BLOWER_UBATT
  
   , LI0_BLOWER_UMOTOR
  
   , LI0_CODE_VEHICULE
  
   , LI0_BLOWER_RAMP
  
   , LI0_RX_FREQUENCY
  
   , LI0_SAFETY_SPEED
  
   , LI0_BLOWER_SPEED
  
   , LI0_EXV1_Position_Feedback
  
   , LI0_EXV1_Movement_Status
  
   , LI0_EXV1_Stall_Detect
  
   , LI0_EXV1_Detect_Status
  
   , LI0_EXV1_Communication_Error
  
   , LI0_EXV1_Internal_Fault
  
   , LI0_EXV1_Protection_fault
  
   , LI0_EXV1_Voltage_Fault
  
   , LI0_EXV1_Position_fault
  
   , LI0_EXV1_Pressure_Feedback
  
   , LI0_EXV1_Temperature_Feedback
  
   , LI0_EXV1_Pos_Cmd
  
   , LI0_EXV1_Select_Cmd
  
   , LI0_EXV1_Initial_Cmd
  
   , LI0_RESERVE_EXV1_5
  
   , LI0_RESERVE_EXV1_8
  
   , LI0_EXV2_Position_Feedback
  
   , LI0_EXV2_Movement_Status
  
   , LI0_EXV2_Stall_Detect
  
   , LI0_EXV2_Detect_Status
  
   , LI0_EXV2_Communication_Error
  
   , LI0_EXV2_Internal_Fault
  
   , LI0_EXV2_Protection_fault
  
   , LI0_EXV2_Voltage_Fault
  
   , LI0_EXV2_Position_fault
  
   , LI0_EXV2_Pressure_Feedback
  
   , LI0_EXV2_Temperature_Feedback
  
   , LI0_EXV2_Pos_Cmd
  
   , LI0_EXV2_Select_Cmd
  
   , LI0_EXV2_Initial_Cmd
  
   , LI0_RESERVE_EXV2_5
  
   , LI0_RESERVE_EXV2_8
  
   , LI0_HVAC_TWV_PosSet
  
   , LI0_HVAC_TWV_MoveEnable
  
   , LI0_HVAC_TWV_ReqMotorEmgyStop
  
   , LI0_HVAC_TWV_ReqMotorOptRecovery
  
   , LI0_HVAC_TWV_RESP_ERROR
  
   , LI0_HVAC_HVAC_TWV_OvervoltageFlt
  
   , LI0_HVAC_TWV_OverCurrent
  
   , LI0_HVAC_TWV_OverTempFlt
  
   , LI0_HVAC_TWV_UnderVoltageFlt
  
   , LI0_HVAC_TWV_InitSta
  
   , LI0_HVAC_TWV_CCWFlg
  
   , LI0_HVAC_TWV_MotorSta
  
   , LI0_HVAC_TWV_RealSta
  
   , LI0_BAT_TWV_PosSet
  
   , LI0_BAT_TWV_MoveEnable
  
   , LI0_BAT_TWV_ReqMotorEmgyStop
  
   , LI0_BAT_TWV_ReqMotorOptRecovery
  
   , LI0_BAT_TWV_RESP_ERROR
  
   , LI0_BAT_HVAC_TWV_OvervoltageFlt
  
   , LI0_BAT_TWV_OverCurrent
  
   , LI0_BAT_TWV_OverTempFlt
  
   , LI0_BAT_TWV_UnderVoltageFlt
  
   , LI0_BAT_TWV_InitSta
  
   , LI0_BAT_TWV_CCWFlg
  
   , LI0_BAT_TWV_MotorSta
  
   , LI0_BAT_TWV_RealSta
  
   , LI0_MOT_TWV_PosSet
  
   , LI0_MOT_TWV_MoveEnable
  
   , LI0_MOT_TWV_ReqMotorEmgyStop
  
   , LI0_MOT_TWV_ReqMotorOptRecovery
  
   , LI0_MOT_TWV_RESP_ERROR
  
   , LI0_MOT_HVAC_TWV_OvervoltageFlt
  
   , LI0_MOT_TWV_OverCurrent
  
   , LI0_MOT_TWV_OverTempFlt
  
   , LI0_MOT_TWV_UnderVoltageFlt
  
   , LI0_MOT_TWV_InitSta
  
   , LI0_MOT_TWV_CCWFlg
  
   , LI0_MOT_TWV_MotorSta
  
   , LI0_MOT_TWV_RealSta
  
   , LI0_PUMP_HVAC_CTRL_byNAD
  
   , LI0_PUMP_HVAC_CTRL_byProgram
  
   , LI0_PUMP_HVAC_CTRL_byStallDetector
  
   , LI0_PUMP_HVAC_CTRL_byClearEventFlags
  
   , LI0_PUMP_HVAC_CTRL_byTargetSpeed
  
   , LI0_PUMP_HVAC_CTRL_byReserved4
  
   , LI0_PUMP_HVAC_CTRL_byReserved5
  
   , LI0_PUMP_HVAC_CTRL_byReserved6
  
   , LI0_PUMP_HVAC_CTRL_byReserved7
  
   , LI0_PUMP_HVAC_CTRL_byStopMode
  
   , LI0_PUMP_HVAC_STATUS_byResponseError
  
   , LI0_PUMP_HVAC_STATUS_byReserved1
  
   , LI0_PUMP_HVAC_STATUS_byOverTemperature
  
   , LI0_PUMP_HVAC_STATUS_byElectricDefect
  
   , LI0_PUMP_HVAC_STATUS_byVoltageError
  
   , LI0_PUMP_HVAC_STATUS_byEmergencyOccurred
  
   , LI0_PUMP_HVAC_STATUS_bySpeedError
  
   , LI0_PUMP_HVAC_STATUS_byStallOccurred
  
   , LI0_PUMP_HVAC_STATUS_byReset
  
   , LI0_PUMP_HVAC_STATUS_bySpeedStatus
  
   , LI0_PUMP_HVAC_STATUS_byActualLA
  
   , LI0_PUMP_HVAC_STATUS_byActualMotorVoltage
  
   , LI0_PUMP_HVAC_STATUS_byFocMode
  
   , LI0_PUMP_HVAC_STATUS_byPwmMode
  
   , LI0_PUMP_BAT_CTRL_byNAD
  
   , LI0_PUMP_BAT_CTRL_byProgram
  
   , LI0_PUMP_BAT_CTRL_byStallDetector
  
   , LI0_PUMP_BAT_CTRL_byClearEventFlags
  
   , LI0_PUMP_BAT_CTRL_byTargetSpeed
  
   , LI0_PUMP_BAT_CTRL_byReserved4
  
   , LI0_PUMP_BAT_CTRL_byReserved5
  
   , LI0_PUMP_BAT_CTRL_byReserved6
  
   , LI0_PUMP_BAT_CTRL_byReserved7
  
   , LI0_PUMP_BAT_CTRL_byStopMode
  
   , LI0_PUMP_BAT_STATUS_byResponseError
  
   , LI0_PUMP_BAT_STATUS_byReserved1
  
   , LI0_PUMP_BAT_STATUS_byOverTemperature
  
   , LI0_PUMP_BAT_STATUS_byElectricDefect
  
   , LI0_PUMP_BAT_STATUS_byVoltageError
  
   , LI0_PUMP_BAT_STATUS_byEmergencyOccurred
  
   , LI0_PUMP_BAT_STATUS_bySpeedError
  
   , LI0_PUMP_BAT_STATUS_byStallOccurred
  
   , LI0_PUMP_BAT_STATUS_byReset
  
   , LI0_PUMP_BAT_STATUS_bySpeedStatus
  
   , LI0_PUMP_BAT_STATUS_byActualLA
  
   , LI0_PUMP_BAT_STATUS_byActualMotorVoltage
  
   , LI0_PUMP_BAT_STATUS_byFocMode
  
   , LI0_PUMP_BAT_STATUS_byPwmMode
  
   , LI0_PUMP_MOTOR_CTRL_byNAD
  
   , LI0_PUMP_MOTOR_CTRL_byProgram
  
   , LI0_PUMP_MOTOR_CTRL_byStallDetector
  
   , LI0_PUMP_MOTOR_CTRL_byClearEventFlags
  
   , LI0_PUMP_MOTOR_CTRL_byTargetSpeed
  
   , LI0_PUMP_MOTOR_CTRL_byReserved4
  
   , LI0_PUMP_MOTOR_CTRL_byReserved5
  
   , LI0_PUMP_MOTOR_CTRL_byReserved6
  
   , LI0_PUMP_MOTOR_CTRL_byReserved7
  
   , LI0_PUMP_MOTOR_CTRL_byStopMode
  
   , LI0_PUMP_MOTOR_STATUS_byResponseError
  
   , LI0_PUMP_MOTOR_STATUS_byReserved1
  
   , LI0_PUMP_MOTOR_STATUS_byOverTemperature
  
   , LI0_PUMP_MOTOR_STATUS_byElectricDefect
  
   , LI0_PUMP_MOTOR_STATUS_byVoltageError
  
   , LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred
  
   , LI0_PUMP_MOTOR_STATUS_bySpeedError
  
   , LI0_PUMP_MOTOR_STATUS_byStallOccurred
  
   , LI0_PUMP_MOTOR_STATUS_byReset
  
   , LI0_PUMP_MOTOR_STATUS_bySpeedStatus
  
   , LI0_PUMP_MOTOR_STATUS_byActualLA
  
   , LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage
  
   , LI0_PUMP_MOTOR_STATUS_byFocMode
  
   , LI0_PUMP_MOTOR_STATUS_byPwmMode
  
} l_signal_handle;
/**********************************************************************/
/*****************               Frame             ********************/
/**********************************************************************/
/* Number of frames */
#define LIN_NUM_OF_FRMS  26U
/* List of frames */
typedef enum {
/* All frames for master node */

   /* Interface_name = LI0 */

   LI0_HVWH_SET_1

   , LI0_HVWH_SET_2
  
   , LI0_HVWH_LIN_STATUS1
  
   , LI0_EAC_Cmd
  
   , LI0_EAC_Status
  
   , LI0_BLW_Cmd
  
   , LI0_BLW_Status1
  
   , LI0_BLW_Status2
  
   , LI0_EXV_CHILLER_Cmd
  
   , LI0_EXV_CHILLER_Status
  
   , LI0_EXV_EVAP_Cmd
  
   , LI0_EXV_EVAP_Status
  
   , LI0_TWV_HVAC_Cmd
  
   , LI0_TWV_HVAC_Status
  
   , LI0_TWV_BAT_Cmd
  
   , LI0_TWV_BAT_Status
  
   , LI0_TWV_MOTOR_Cmd
  
   , LI0_TWV_MOTOR_Status
  
   , LI0_PUMP_HVAC_CTRL
  
   , LI0_PUMP_HVAC_STATUS
  
   , LI0_PUMP_BAT_CTRL
  
   , LI0_PUMP_BAT_STATUS
  
   , LI0_PUMP_MOTOR_CTRL
  
   , LI0_PUMP_MOTOR_STATUS
  
   , LI0_MasterReq
  
   , LI0_SlaveResp
  
} l_frame_handle;
/**********************************************************************/
/***************        schedule table       *******************/
/**********************************************************************/
/* Number of schedule tables */
#define  LIN_NUM_OF_SCHD_TBL   5U
/* List of schedules */
typedef enum {

   /* Interface_name = LI0 */

   LI0_LIN_NULL_SCHEDULE

   ,LI0_GOTO_SLEEP_SCHEDULE
   
   ,LI0_DiagRequest
   
   ,LI0_DiagResponse
   
   ,LI0_Sch_Normal
   
}l_schedule_handle;
/**********************************************************************/
/***************             Configuration          *******************/
/**********************************************************************/


/* Size of configuration in ROM and RAM used for interface: LI0 */
#define LI0_LIN_SIZE_OF_CFG  28U



/*********************************************************************
 * global macros
 *********************************************************************/
/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_rd
 * Description   : This function return value of bool signal
 *
 * Implements    : l_bool_rd_Class
 *END**************************************************************************/
#define l_bool_rd(SIGNAL) l_bool_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_wr
 * Description   : This function write value A to bool signal
 *
 * Implements    : l_bool_wr_Class
 *END**************************************************************************/
#define l_bool_wr(SIGNAL, A) l_bool_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_rd
 * Description   : This function read data from (1-8 bit)signal
 *
 * Implements    : l_u8_rd_Class
 *END**************************************************************************/
#define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_wr
 * Description   : This this function write data to (1-8 bit)signal
 *
 * Implements    : l_u8_wr_Class
 *END**************************************************************************/
#define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_rd
 * Description   : This function read data from (8-16 bit)signal
 *
 * Implements    : l_u16_rd_Class
 *END**************************************************************************/
#define l_u16_rd(SIGNAL) l_u16_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_wr
 * Description   : This function write data to (8-16 bit) signal
 *
 * Implements    : l_u16_wr_Class
 *END**************************************************************************/
#define l_u16_wr(SIGNAL, A) l_u16_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_rd
 * Description   : This function read data from bytes signal
 *
 * Implements    : l_bytes_rd_Class
 *END**************************************************************************/
#define l_bytes_rd(SIGNAL, start, count, data)  l_bytes_rd_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_wr
 * Description   : This function write data to bytes signal
 *
 * Implements    : l_bytes_wr_Class
 *END**************************************************************************/
#define l_bytes_wr(SIGNAL, start, count, data) l_bytes_wr_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_tst
 * Description   : This function return value of flag which related with signal
 *
 * Implements    : l_flg_tst_Class
 *END**************************************************************************/
#define l_flg_tst(FLAG) l_flg_tst_##FLAG()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_clr
 * Description   : This function clear flag which related with signal
 *
 * Implements    : l_flg_clr_Class
 *END**************************************************************************/
#define l_flg_clr(FLAG) l_flg_clr_##FLAG()

#define LIN_TEST_BIT(A,B) ((l_bool)((((A) & (1U << (B))) != 0U) ? 1U : 0U))
#define LIN_SET_BIT(A,B)                      ((A) |= (l_u8) (1U << (B)))
#define LIN_CLEAR_BIT(A,B)               ((A) &= ((l_u8) (~(1U << (B)))))
#define LIN_BYTE_MASK  ((l_u16)(((l_u16)((l_u16)1 << CHAR_BIT)) - (l_u16)1))


/* Returns the low byte of the 32-bit value    */
#define BYTE_0(n)                              ((l_u8)((n) & (l_u8)0xFF))
/* Returns the second byte of the 32-bit value */
#define BYTE_1(n)                        ((l_u8)(BYTE_0((n) >> (l_u8)8)))
/* Returns the third byte of the 32-bit value  */
#define BYTE_2(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)16)))
/* Returns high byte of the 32-bit value       */
#define BYTE_3(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)24)))

/*
 * defines for signal access
 */



#define LIN_LI0_TEMP_EAU_CPT_BT_BYTE_OFFSET    10U
#define LIN_LI0_TEMP_EAU_CPT_BT_BIT_OFFSET    0U
#define LIN_LI0_TEMP_EAU_CPT_BT_SIGNAL_SIZE    8U
#define LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BIT_OFFSET    0U


#define LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET    11U
#define LIN_LI0_I_CONSO_CTP_EAU_BT_BIT_OFFSET    0U
#define LIN_LI0_I_CONSO_CTP_EAU_BT_SIGNAL_SIZE    9U
#define LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BIT_OFFSET    1U


#define LIN_LI0_DEFAUT_CTP_EAU_BYTE_OFFSET    12U
#define LIN_LI0_DEFAUT_CTP_EAU_BIT_OFFSET    1U
#define LIN_LI0_DEFAUT_CTP_EAU_SIGNAL_SIZE    1U
#define LIN_LI0_DEFAUT_CTP_EAU_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_DEFAUT_CTP_EAU_FLAG_BIT_OFFSET    2U


#define LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BYTE_OFFSET    12U
#define LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BIT_OFFSET    2U
#define LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_SIGNAL_SIZE    1U
#define LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BIT_OFFSET    3U


#define LIN_LI0_RESP_ERROR_CTPE_BYTE_OFFSET    12U
#define LIN_LI0_RESP_ERROR_CTPE_BIT_OFFSET    3U
#define LIN_LI0_RESP_ERROR_CTPE_SIGNAL_SIZE    1U
#define LIN_LI0_RESP_ERROR_CTPE_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_RESP_ERROR_CTPE_FLAG_BIT_OFFSET    4U


#define LIN_LI0_INTERLOCK_STATUS_BYTE_OFFSET    12U
#define LIN_LI0_INTERLOCK_STATUS_BIT_OFFSET    4U
#define LIN_LI0_INTERLOCK_STATUS_SIGNAL_SIZE    1U
#define LIN_LI0_INTERLOCK_STATUS_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_INTERLOCK_STATUS_FLAG_BIT_OFFSET    5U


#define LIN_LI0_LIMIT_POWER_HVWH_BYTE_OFFSET    12U
#define LIN_LI0_LIMIT_POWER_HVWH_BIT_OFFSET    5U
#define LIN_LI0_LIMIT_POWER_HVWH_SIGNAL_SIZE    1U
#define LIN_LI0_LIMIT_POWER_HVWH_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_LIMIT_POWER_HVWH_FLAG_BIT_OFFSET    6U


#define LIN_LI0_RESERV_2_BYTE_OFFSET    12U
#define LIN_LI0_RESERV_2_BIT_OFFSET    6U
#define LIN_LI0_RESERV_2_SIGNAL_SIZE    2U
#define LIN_LI0_RESERV_2_FLAG_BYTE_OFFSET    2U
#define LIN_LI0_RESERV_2_FLAG_BIT_OFFSET    7U


#define LIN_LI0_DEFAUT_ALIM_BT_BYTE_OFFSET    13U
#define LIN_LI0_DEFAUT_ALIM_BT_BIT_OFFSET    0U
#define LIN_LI0_DEFAUT_ALIM_BT_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_ALIM_BT_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_ALIM_BT_FLAG_BIT_OFFSET    0U


#define LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_BYTE_OFFSET    13U
#define LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_BIT_OFFSET    4U
#define LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BIT_OFFSET    1U


#define LIN_LI0_DEFAUT_NON_FONCT_PERM_BYTE_OFFSET    14U
#define LIN_LI0_DEFAUT_NON_FONCT_PERM_BIT_OFFSET    0U
#define LIN_LI0_DEFAUT_NON_FONCT_PERM_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BIT_OFFSET    2U


#define LIN_LI0_DEFAUT_PROTECTION_BYTE_OFFSET    14U
#define LIN_LI0_DEFAUT_PROTECTION_BIT_OFFSET    4U
#define LIN_LI0_DEFAUT_PROTECTION_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_PROTECTION_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_PROTECTION_FLAG_BIT_OFFSET    3U


#define LIN_LI0_DEFAUT_SONDE_TEMP_BYTE_OFFSET    15U
#define LIN_LI0_DEFAUT_SONDE_TEMP_BIT_OFFSET    0U
#define LIN_LI0_DEFAUT_SONDE_TEMP_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BIT_OFFSET    4U


#define LIN_LI0_DEFAUT_TENSION_BT_BYTE_OFFSET    15U
#define LIN_LI0_DEFAUT_TENSION_BT_BIT_OFFSET    4U
#define LIN_LI0_DEFAUT_TENSION_BT_SIGNAL_SIZE    4U
#define LIN_LI0_DEFAUT_TENSION_BT_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_DEFAUT_TENSION_BT_FLAG_BIT_OFFSET    5U


#define LIN_LI0_TENSION_LV_CTPE_ELEC_BYTE_OFFSET    16U
#define LIN_LI0_TENSION_LV_CTPE_ELEC_BIT_OFFSET    0U
#define LIN_LI0_TENSION_LV_CTPE_ELEC_SIGNAL_SIZE    7U
#define LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BIT_OFFSET    6U


#define LIN_LI0_RESERV_9_BYTE_OFFSET    16U
#define LIN_LI0_RESERV_9_BIT_OFFSET    7U
#define LIN_LI0_RESERV_9_SIGNAL_SIZE    9U
#define LIN_LI0_RESERV_9_FLAG_BYTE_OFFSET    3U
#define LIN_LI0_RESERV_9_FLAG_BIT_OFFSET    7U


#define LIN_LI0_CMD_CTPE_EAU_BT_BYTE_OFFSET    0U
#define LIN_LI0_CMD_CTPE_EAU_BT_BIT_OFFSET    0U
#define LIN_LI0_CMD_CTPE_EAU_BT_SIGNAL_SIZE    7U
#define LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BIT_OFFSET    0U


#define LIN_LI0_COUPURE_CONSO_CPT_BYTE_OFFSET    0U
#define LIN_LI0_COUPURE_CONSO_CPT_BIT_OFFSET    7U
#define LIN_LI0_COUPURE_CONSO_CPT_SIGNAL_SIZE    1U
#define LIN_LI0_COUPURE_CONSO_CPT_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_COUPURE_CONSO_CPT_FLAG_BIT_OFFSET    1U


#define LIN_LI0_CMD_PWR_LIMIT_HVWH_BYTE_OFFSET    1U
#define LIN_LI0_CMD_PWR_LIMIT_HVWH_BIT_OFFSET    1U
#define LIN_LI0_CMD_PWR_LIMIT_HVWH_SIGNAL_SIZE    7U
#define LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BIT_OFFSET    2U


#define LIN_LI0_CDE_PV_LIN_BYTE_OFFSET    2U
#define LIN_LI0_CDE_PV_LIN_BIT_OFFSET    0U
#define LIN_LI0_CDE_PV_LIN_SIGNAL_SIZE    8U
#define LIN_LI0_CDE_PV_LIN_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_CDE_PV_LIN_FLAG_BIT_OFFSET    0U


#define LIN_LI0_RESERVE_8_BYTE_OFFSET    3U
#define LIN_LI0_RESERVE_8_BIT_OFFSET    0U
#define LIN_LI0_RESERVE_8_SIGNAL_SIZE    8U
#define LIN_LI0_RESERVE_8_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_RESERVE_8_FLAG_BIT_OFFSET    1U


#define LIN_LI0_RESERVE_16_BYTE_OFFSET    4U
#define LIN_LI0_RESERVE_16_BIT_OFFSET    0U
#define LIN_LI0_RESERVE_16_SIGNAL_SIZE    16U
#define LIN_LI0_RESERVE_16_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_RESERVE_16_FLAG_BIT_OFFSET    2U


#define LIN_LI0_RESERVE_16_2_BYTE_OFFSET    6U
#define LIN_LI0_RESERVE_16_2_BIT_OFFSET    0U
#define LIN_LI0_RESERVE_16_2_SIGNAL_SIZE    16U
#define LIN_LI0_RESERVE_16_2_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_RESERVE_16_2_FLAG_BIT_OFFSET    3U


#define LIN_LI0_RESERVE_16_3_BYTE_OFFSET    8U
#define LIN_LI0_RESERVE_16_3_BIT_OFFSET    0U
#define LIN_LI0_RESERVE_16_3_SIGNAL_SIZE    16U
#define LIN_LI0_RESERVE_16_3_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_RESERVE_16_3_FLAG_BIT_OFFSET    4U


#define LIN_LI0_CompSpd_Target_BYTE_OFFSET    18U
#define LIN_LI0_CompSpd_Target_BIT_OFFSET    0U
#define LIN_LI0_CompSpd_Target_SIGNAL_SIZE    8U
#define LIN_LI0_CompSpd_Target_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_CompSpd_Target_FLAG_BIT_OFFSET    0U


#define LIN_LI0_Comp_On_Rq_BYTE_OFFSET    20U
#define LIN_LI0_Comp_On_Rq_BIT_OFFSET    0U
#define LIN_LI0_Comp_On_Rq_SIGNAL_SIZE    2U
#define LIN_LI0_Comp_On_Rq_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_Comp_On_Rq_FLAG_BIT_OFFSET    1U


#define LIN_LI0_Comp_Fault_Clear_Rq_BYTE_OFFSET    20U
#define LIN_LI0_Comp_Fault_Clear_Rq_BIT_OFFSET    2U
#define LIN_LI0_Comp_Fault_Clear_Rq_SIGNAL_SIZE    2U
#define LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BIT_OFFSET    2U


#define LIN_LI0_Comp_HvInterlock_Rq_BYTE_OFFSET    20U
#define LIN_LI0_Comp_HvInterlock_Rq_BIT_OFFSET    4U
#define LIN_LI0_Comp_HvInterlock_Rq_SIGNAL_SIZE    2U
#define LIN_LI0_Comp_HvInterlock_Rq_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_Comp_HvInterlock_Rq_FLAG_BIT_OFFSET    3U


#define LIN_LI0_Comp_HvDischarge_Rq_BYTE_OFFSET    20U
#define LIN_LI0_Comp_HvDischarge_Rq_BIT_OFFSET    6U
#define LIN_LI0_Comp_HvDischarge_Rq_SIGNAL_SIZE    2U
#define LIN_LI0_Comp_HvDischarge_Rq_FLAG_BYTE_OFFSET    4U
#define LIN_LI0_Comp_HvDischarge_Rq_FLAG_BIT_OFFSET    4U


#define LIN_LI0_CompSpd_Est_BYTE_OFFSET    21U
#define LIN_LI0_CompSpd_Est_BIT_OFFSET    0U
#define LIN_LI0_CompSpd_Est_SIGNAL_SIZE    8U
#define LIN_LI0_CompSpd_Est_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_CompSpd_Est_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EAC_HV_InputCurr_BYTE_OFFSET    23U
#define LIN_LI0_EAC_HV_InputCurr_BIT_OFFSET    0U
#define LIN_LI0_EAC_HV_InputCurr_SIGNAL_SIZE    8U
#define LIN_LI0_EAC_HV_InputCurr_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_HV_InputCurr_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EAC_HV_Volt_BYTE_OFFSET    24U
#define LIN_LI0_EAC_HV_Volt_BIT_OFFSET    0U
#define LIN_LI0_EAC_HV_Volt_SIGNAL_SIZE    8U
#define LIN_LI0_EAC_HV_Volt_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_HV_Volt_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EAC_InvrtTemp_BYTE_OFFSET    25U
#define LIN_LI0_EAC_InvrtTemp_BIT_OFFSET    0U
#define LIN_LI0_EAC_InvrtTemp_SIGNAL_SIZE    8U
#define LIN_LI0_EAC_InvrtTemp_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_InvrtTemp_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EAC_InvrtPhaseCurr_BYTE_OFFSET    26U
#define LIN_LI0_EAC_InvrtPhaseCurr_BIT_OFFSET    0U
#define LIN_LI0_EAC_InvrtPhaseCurr_SIGNAL_SIZE    8U
#define LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EAC_Sp_BrdTemp_Lmt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_BrdTemp_Lmt_BIT_OFFSET    0U
#define LIN_LI0_EAC_Sp_BrdTemp_Lmt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EAC_Sp_CurrLmt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_CurrLmt_BIT_OFFSET    1U
#define LIN_LI0_EAC_Sp_CurrLmt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_CurrLmt_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_Sp_CurrLmt_FLAG_BIT_OFFSET    6U


#define LIN_LI0_EAC_Sp_HVVolt_Flt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_HVVolt_Flt_BIT_OFFSET    2U
#define LIN_LI0_EAC_Sp_HVVolt_Flt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BYTE_OFFSET    5U
#define LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BIT_OFFSET    7U


#define LIN_LI0_EAC_Sp_Temp_Excess_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_Temp_Excess_BIT_OFFSET    3U
#define LIN_LI0_EAC_Sp_Temp_Excess_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EAC_Sp_Comm_Flt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_Comm_Flt_BIT_OFFSET    4U
#define LIN_LI0_EAC_Sp_Comm_Flt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BIT_OFFSET    5U
#define LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EAC_Off_Sens_Flt_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Off_Sens_Flt_BIT_OFFSET    6U
#define LIN_LI0_EAC_Off_Sens_Flt_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Off_Sens_Flt_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Off_Sens_Flt_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EAC_Off_ShrtCurr_BYTE_OFFSET    27U
#define LIN_LI0_EAC_Off_ShrtCurr_BIT_OFFSET    7U
#define LIN_LI0_EAC_Off_ShrtCurr_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Off_ShrtCurr_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Off_ShrtCurr_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EAC_Off_Stall_BYTE_OFFSET    28U
#define LIN_LI0_EAC_Off_Stall_BIT_OFFSET    0U
#define LIN_LI0_EAC_Off_Stall_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_Off_Stall_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_Off_Stall_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EAC_RsErr_BYTE_OFFSET    28U
#define LIN_LI0_EAC_RsErr_BIT_OFFSET    1U
#define LIN_LI0_EAC_RsErr_SIGNAL_SIZE    1U
#define LIN_LI0_EAC_RsErr_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_EAC_RsErr_FLAG_BIT_OFFSET    6U


#define LIN_LI0_Comp_HvInterlock_Stat_BYTE_OFFSET    28U
#define LIN_LI0_Comp_HvInterlock_Stat_BIT_OFFSET    2U
#define LIN_LI0_Comp_HvInterlock_Stat_SIGNAL_SIZE    3U
#define LIN_LI0_Comp_HvInterlock_Stat_FLAG_BYTE_OFFSET    6U
#define LIN_LI0_Comp_HvInterlock_Stat_FLAG_BIT_OFFSET    7U


#define LIN_LI0_Comp_Oprtn_Stat_BYTE_OFFSET    28U
#define LIN_LI0_Comp_Oprtn_Stat_BIT_OFFSET    5U
#define LIN_LI0_Comp_Oprtn_Stat_SIGNAL_SIZE    3U
#define LIN_LI0_Comp_Oprtn_Stat_FLAG_BYTE_OFFSET    7U
#define LIN_LI0_Comp_Oprtn_Stat_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BLOWER_DIAG_FLAG1_BYTE_OFFSET    37U
#define LIN_LI0_BLOWER_DIAG_FLAG1_BIT_OFFSET    3U
#define LIN_LI0_BLOWER_DIAG_FLAG1_SIGNAL_SIZE    4U
#define LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BLOWER_DIAG_FLAG2_BYTE_OFFSET    38U
#define LIN_LI0_BLOWER_DIAG_FLAG2_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_DIAG_FLAG2_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BIT_OFFSET    3U


#define LIN_LI0_BLOWER_IBATT_BYTE_OFFSET    39U
#define LIN_LI0_BLOWER_IBATT_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_IBATT_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_IBATT_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_IBATT_FLAG_BIT_OFFSET    4U


#define LIN_LI0_BLOWER_ResponseError_BYTE_OFFSET    37U
#define LIN_LI0_BLOWER_ResponseError_BIT_OFFSET    7U
#define LIN_LI0_BLOWER_ResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_BLOWER_ResponseError_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_ResponseError_FLAG_BIT_OFFSET    2U


#define LIN_LI0_BLOWER_ROTATION_SPEED_BYTE_OFFSET    40U
#define LIN_LI0_BLOWER_ROTATION_SPEED_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_ROTATION_SPEED_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BIT_OFFSET    5U


#define LIN_LI0_BLOWER_STATUS_MOTOR_BYTE_OFFSET    37U
#define LIN_LI0_BLOWER_STATUS_MOTOR_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_STATUS_MOTOR_SIGNAL_SIZE    3U
#define LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BLOWER_SUPPLIER_BYTE_OFFSET    43U
#define LIN_LI0_BLOWER_SUPPLIER_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_SUPPLIER_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_SUPPLIER_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_BLOWER_SUPPLIER_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BLOWER_TEMPERATURE_BYTE_OFFSET    41U
#define LIN_LI0_BLOWER_TEMPERATURE_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_TEMPERATURE_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_TEMPERATURE_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_TEMPERATURE_FLAG_BIT_OFFSET    6U


#define LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET    45U
#define LIN_LI0_BLOWER_TORQUE_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_TORQUE_SIGNAL_SIZE    10U
#define LIN_LI0_BLOWER_TORQUE_FLAG_BYTE_OFFSET    11U
#define LIN_LI0_BLOWER_TORQUE_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BLOWER_UBATT_BYTE_OFFSET    42U
#define LIN_LI0_BLOWER_UBATT_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_UBATT_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_UBATT_FLAG_BYTE_OFFSET    9U
#define LIN_LI0_BLOWER_UBATT_FLAG_BIT_OFFSET    7U


#define LIN_LI0_BLOWER_UMOTOR_BYTE_OFFSET    44U
#define LIN_LI0_BLOWER_UMOTOR_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_UMOTOR_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_UMOTOR_FLAG_BYTE_OFFSET    10U
#define LIN_LI0_BLOWER_UMOTOR_FLAG_BIT_OFFSET    1U


#define LIN_LI0_CODE_VEHICULE_BYTE_OFFSET    33U
#define LIN_LI0_CODE_VEHICULE_BIT_OFFSET    0U
#define LIN_LI0_CODE_VEHICULE_SIGNAL_SIZE    4U
#define LIN_LI0_CODE_VEHICULE_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_CODE_VEHICULE_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BLOWER_RAMP_BYTE_OFFSET    33U
#define LIN_LI0_BLOWER_RAMP_BIT_OFFSET    4U
#define LIN_LI0_BLOWER_RAMP_SIGNAL_SIZE    4U
#define LIN_LI0_BLOWER_RAMP_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_BLOWER_RAMP_FLAG_BIT_OFFSET    2U


#define LIN_LI0_RX_FREQUENCY_BYTE_OFFSET    29U
#define LIN_LI0_RX_FREQUENCY_BIT_OFFSET    0U
#define LIN_LI0_RX_FREQUENCY_SIGNAL_SIZE    12U
#define LIN_LI0_RX_FREQUENCY_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_RX_FREQUENCY_FLAG_BIT_OFFSET    0U


#define LIN_LI0_SAFETY_SPEED_BYTE_OFFSET    35U
#define LIN_LI0_SAFETY_SPEED_BIT_OFFSET    0U
#define LIN_LI0_SAFETY_SPEED_SIGNAL_SIZE    8U
#define LIN_LI0_SAFETY_SPEED_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_SAFETY_SPEED_FLAG_BIT_OFFSET    4U


#define LIN_LI0_BLOWER_SPEED_BYTE_OFFSET    34U
#define LIN_LI0_BLOWER_SPEED_BIT_OFFSET    0U
#define LIN_LI0_BLOWER_SPEED_SIGNAL_SIZE    8U
#define LIN_LI0_BLOWER_SPEED_FLAG_BYTE_OFFSET    8U
#define LIN_LI0_BLOWER_SPEED_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET    57U
#define LIN_LI0_EXV1_Position_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Position_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV1_Position_Feedback_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Position_Feedback_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV1_Movement_Status_BYTE_OFFSET    59U
#define LIN_LI0_EXV1_Movement_Status_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Movement_Status_SIGNAL_SIZE    1U
#define LIN_LI0_ACK1_Movement_Status_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Movement_Status_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV1_Stall_Detect_BYTE_OFFSET    59U
#define LIN_LI0_EXV1_Stall_Detect_BIT_OFFSET    1U
#define LIN_LI0_EXV1_Stall_Detect_SIGNAL_SIZE    1U
#define LIN_LI0_EXV1_Stall_Detect_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Stall_Detect_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV1_Detect_Status_BYTE_OFFSET    59U
#define LIN_LI0_EXV1_Detect_Status_BIT_OFFSET    2U
#define LIN_LI0_EXV1_Detect_Status_SIGNAL_SIZE    1U
#define LIN_LI0_EXV1_Detect_Status_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Detect_Status_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EXV1_Communication_Error_BYTE_OFFSET    59U
#define LIN_LI0_EXV1_Communication_Error_BIT_OFFSET    3U
#define LIN_LI0_EXV1_Communication_Error_SIGNAL_SIZE    1U
#define LIN_LI0_EXV1_Communication_Error_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Communication_Error_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EXV1_Internal_Fault_BYTE_OFFSET    60U
#define LIN_LI0_EXV1_Internal_Fault_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Internal_Fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV1_Internal_Fault_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Internal_Fault_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EXV1_Protection_fault_BYTE_OFFSET    60U
#define LIN_LI0_EXV1_Protection_fault_BIT_OFFSET    2U
#define LIN_LI0_EXV1_Protection_fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV1_Protection_fault_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Protection_fault_FLAG_BIT_OFFSET    6U


#define LIN_LI0_EXV1_Voltage_Fault_BYTE_OFFSET    60U
#define LIN_LI0_EXV1_Voltage_Fault_BIT_OFFSET    4U
#define LIN_LI0_EXV1_Voltage_Fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV1_Voltage_Fault_FLAG_BYTE_OFFSET    13U
#define LIN_LI0_EXV1_Voltage_Fault_FLAG_BIT_OFFSET    7U


#define LIN_LI0_EXV1_Position_fault_BYTE_OFFSET    60U
#define LIN_LI0_EXV1_Position_fault_BIT_OFFSET    6U
#define LIN_LI0_EXV1_Position_fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV1_Position_fault_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_EXV1_Position_fault_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET    61U
#define LIN_LI0_EXV1_Pressure_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Pressure_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV1_Pressure_Feedback_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_EXV1_Pressure_Feedback_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET    63U
#define LIN_LI0_EXV1_Temperature_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Temperature_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV1_Temperature_Feedback_FLAG_BYTE_OFFSET    14U
#define LIN_LI0_EXV1_Temperature_Feedback_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET    53U
#define LIN_LI0_EXV1_Pos_Cmd_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Pos_Cmd_SIGNAL_SIZE    16U
#define LIN_LI0_EXV1_Pos_Cmd_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_EXV1_Pos_Cmd_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV1_Select_Cmd_BYTE_OFFSET    55U
#define LIN_LI0_EXV1_Select_Cmd_BIT_OFFSET    0U
#define LIN_LI0_EXV1_Select_Cmd_SIGNAL_SIZE    2U
#define LIN_LI0_EXV1_Select_Cmd_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_EXV1_Select_Cmd_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV1_Initial_Cmd_BYTE_OFFSET    55U
#define LIN_LI0_EXV1_Initial_Cmd_BIT_OFFSET    2U
#define LIN_LI0_EXV1_Initial_Cmd_SIGNAL_SIZE    1U
#define LIN_LI0_EXV1_Initial_Cmd_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_EXV1_Initial_Cmd_FLAG_BIT_OFFSET    2U


#define LIN_LI0_RESERVE_EXV1_5_BYTE_OFFSET    55U
#define LIN_LI0_RESERVE_EXV1_5_BIT_OFFSET    3U
#define LIN_LI0_RESERVE_EXV1_5_SIGNAL_SIZE    1U
#define LIN_LI0_RESERVE_EXV1_5_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_RESERVE_EXV1_5_FLAG_BIT_OFFSET    3U


#define LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET    55U
#define LIN_LI0_RESERVE_EXV1_8_BIT_OFFSET    4U
#define LIN_LI0_RESERVE_EXV1_8_SIGNAL_SIZE    12U
#define LIN_LI0_RESERVE_EXV1_8_FLAG_BYTE_OFFSET    12U
#define LIN_LI0_RESERVE_EXV1_8_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET    69U
#define LIN_LI0_EXV2_Position_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Position_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV2_Position_Feedback_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Position_Feedback_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV2_Movement_Status_BYTE_OFFSET    71U
#define LIN_LI0_EXV2_Movement_Status_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Movement_Status_SIGNAL_SIZE    1U
#define LIN_LI0_EXV2_Movement_Status_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Movement_Status_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV2_Stall_Detect_BYTE_OFFSET    71U
#define LIN_LI0_EXV2_Stall_Detect_BIT_OFFSET    1U
#define LIN_LI0_EXV2_Stall_Detect_SIGNAL_SIZE    1U
#define LIN_LI0_EXV2_Stall_Detect_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Stall_Detect_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV2_Detect_Status_BYTE_OFFSET    71U
#define LIN_LI0_EXV2_Detect_Status_BIT_OFFSET    2U
#define LIN_LI0_EXV2_Detect_Status_SIGNAL_SIZE    1U
#define LIN_LI0_EXV2_Detect_Status_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Detect_Status_FLAG_BIT_OFFSET    3U


#define LIN_LI0_EXV2_Communication_Error_BYTE_OFFSET    71U
#define LIN_LI0_EXV2_Communication_Error_BIT_OFFSET    3U
#define LIN_LI0_EXV2_Communication_Error_SIGNAL_SIZE    1U
#define LIN_LI0_EXV2_Communication_Error_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Communication_Error_FLAG_BIT_OFFSET    4U


#define LIN_LI0_EXV2_Internal_Fault_BYTE_OFFSET    72U
#define LIN_LI0_EXV2_Internal_Fault_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Internal_Fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV2_Internal_Fault_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Internal_Fault_FLAG_BIT_OFFSET    5U


#define LIN_LI0_EXV2_Protection_fault_BYTE_OFFSET    72U
#define LIN_LI0_EXV2_Protection_fault_BIT_OFFSET    2U
#define LIN_LI0_EXV2_Protection_fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV2_Protection_fault_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Protection_fault_FLAG_BIT_OFFSET    6U


#define LIN_LI0_EXV2_Voltage_Fault_BYTE_OFFSET    72U
#define LIN_LI0_EXV2_Voltage_Fault_BIT_OFFSET    4U
#define LIN_LI0_EXV2_Voltage_Fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV2_Voltage_Fault_FLAG_BYTE_OFFSET    16U
#define LIN_LI0_EXV2_Voltage_Fault_FLAG_BIT_OFFSET    7U


#define LIN_LI0_EXV2_Position_fault_BYTE_OFFSET    72U
#define LIN_LI0_EXV2_Position_fault_BIT_OFFSET    6U
#define LIN_LI0_EXV2_Position_fault_SIGNAL_SIZE    2U
#define LIN_LI0_EXV2_Position_fault_FLAG_BYTE_OFFSET    17U
#define LIN_LI0_EXV2_Position_fault_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET    73U
#define LIN_LI0_EXV2_Pressure_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Pressure_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV2_Pressure_Feedback_FLAG_BYTE_OFFSET    17U
#define LIN_LI0_EXV2_Pressure_Feedback_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET    75U
#define LIN_LI0_EXV2_Temperature_Feedback_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Temperature_Feedback_SIGNAL_SIZE    16U
#define LIN_LI0_EXV2_Temperature_Feedback_FLAG_BYTE_OFFSET    17U
#define LIN_LI0_EXV2_Temperature_Feedback_FLAG_BIT_OFFSET    2U


#define LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET    65U
#define LIN_LI0_EXV2_Pos_Cmd_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Pos_Cmd_SIGNAL_SIZE    16U
#define LIN_LI0_EXV2_Pos_Cmd_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_EXV2_Pos_Cmd_FLAG_BIT_OFFSET    0U


#define LIN_LI0_EXV2_Select_Cmd_BYTE_OFFSET    67U
#define LIN_LI0_EXV2_Select_Cmd_BIT_OFFSET    0U
#define LIN_LI0_EXV2_Select_Cmd_SIGNAL_SIZE    2U
#define LIN_LI0_EXV2_Select_Cmd_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_EXV2_Select_Cmd_FLAG_BIT_OFFSET    1U


#define LIN_LI0_EXV2_Initial_Cmd_BYTE_OFFSET    67U
#define LIN_LI0_EXV2_Initial_Cmd_BIT_OFFSET    2U
#define LIN_LI0_EXV2_Initial_Cmd_SIGNAL_SIZE    1U
#define LIN_LI0_EXV2_Initial_Cmd_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_EXV2_Initial_Cmd_FLAG_BIT_OFFSET    2U


#define LIN_LI0_RESERVE_EXV2_5_BYTE_OFFSET    67U
#define LIN_LI0_RESERVE_EXV2_5_BIT_OFFSET    3U
#define LIN_LI0_RESERVE_EXV2_5_SIGNAL_SIZE    1U
#define LIN_LI0_RESERVE_EXV2_5_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_RESERVE_EXV2_5_FLAG_BIT_OFFSET    3U


#define LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET    67U
#define LIN_LI0_RESERVE_EXV2_8_BIT_OFFSET    4U
#define LIN_LI0_RESERVE_EXV2_8_SIGNAL_SIZE    12U
#define LIN_LI0_RESERVE_EXV2_8_FLAG_BYTE_OFFSET    15U
#define LIN_LI0_RESERVE_EXV2_8_FLAG_BIT_OFFSET    4U


#define LIN_LI0_HVAC_TWV_PosSet_BYTE_OFFSET    80U
#define LIN_LI0_HVAC_TWV_PosSet_BIT_OFFSET    0U
#define LIN_LI0_HVAC_TWV_PosSet_SIGNAL_SIZE    8U
#define LIN_LI0_HVAC_TWV_PosSet_FLAG_BYTE_OFFSET    18U
#define LIN_LI0_HVAC_TWV_PosSet_FLAG_BIT_OFFSET    0U


#define LIN_LI0_HVAC_TWV_MoveEnable_BYTE_OFFSET    81U
#define LIN_LI0_HVAC_TWV_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_HVAC_TWV_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BYTE_OFFSET    18U
#define LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BIT_OFFSET    1U


#define LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BYTE_OFFSET    81U
#define LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BIT_OFFSET    4U
#define LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET    18U
#define LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET    2U


#define LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BYTE_OFFSET    81U
#define LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BIT_OFFSET    5U
#define LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET    18U
#define LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET    3U


#define LIN_LI0_HVAC_TWV_RESP_ERROR_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_RESP_ERROR_BIT_OFFSET    0U
#define LIN_LI0_HVAC_TWV_RESP_ERROR_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BIT_OFFSET    0U


#define LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BIT_OFFSET    1U
#define LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET    1U


#define LIN_LI0_HVAC_TWV_OverCurrent_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_OverCurrent_BIT_OFFSET    2U
#define LIN_LI0_HVAC_TWV_OverCurrent_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BIT_OFFSET    2U


#define LIN_LI0_HVAC_TWV_OverTempFlt_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_OverTempFlt_BIT_OFFSET    3U
#define LIN_LI0_HVAC_TWV_OverTempFlt_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BIT_OFFSET    3U


#define LIN_LI0_HVAC_TWV_UnderVoltageFlt_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_UnderVoltageFlt_BIT_OFFSET    4U
#define LIN_LI0_HVAC_TWV_UnderVoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET    4U


#define LIN_LI0_HVAC_TWV_InitSta_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_InitSta_BIT_OFFSET    5U
#define LIN_LI0_HVAC_TWV_InitSta_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_InitSta_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_InitSta_FLAG_BIT_OFFSET    5U


#define LIN_LI0_HVAC_TWV_CCWFlg_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_CCWFlg_BIT_OFFSET    6U
#define LIN_LI0_HVAC_TWV_CCWFlg_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BIT_OFFSET    6U


#define LIN_LI0_HVAC_TWV_MotorSta_BYTE_OFFSET    85U
#define LIN_LI0_HVAC_TWV_MotorSta_BIT_OFFSET    7U
#define LIN_LI0_HVAC_TWV_MotorSta_SIGNAL_SIZE    1U
#define LIN_LI0_HVAC_TWV_MotorSta_FLAG_BYTE_OFFSET    19U
#define LIN_LI0_HVAC_TWV_MotorSta_FLAG_BIT_OFFSET    7U


#define LIN_LI0_HVAC_TWV_RealSta_BYTE_OFFSET    86U
#define LIN_LI0_HVAC_TWV_RealSta_BIT_OFFSET    0U
#define LIN_LI0_HVAC_TWV_RealSta_SIGNAL_SIZE    8U
#define LIN_LI0_HVAC_TWV_RealSta_FLAG_BYTE_OFFSET    20U
#define LIN_LI0_HVAC_TWV_RealSta_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BAT_TWV_PosSet_BYTE_OFFSET    96U
#define LIN_LI0_BAT_TWV_PosSet_BIT_OFFSET    0U
#define LIN_LI0_BAT_TWV_PosSet_SIGNAL_SIZE    8U
#define LIN_LI0_BAT_TWV_PosSet_FLAG_BYTE_OFFSET    21U
#define LIN_LI0_BAT_TWV_PosSet_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BAT_TWV_MoveEnable_BYTE_OFFSET    97U
#define LIN_LI0_BAT_TWV_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_BAT_TWV_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_MoveEnable_FLAG_BYTE_OFFSET    21U
#define LIN_LI0_BAT_TWV_MoveEnable_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BYTE_OFFSET    97U
#define LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BIT_OFFSET    4U
#define LIN_LI0_BAT_TWV_ReqMotorEmgyStop_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET    21U
#define LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET    2U


#define LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BYTE_OFFSET    97U
#define LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BIT_OFFSET    5U
#define LIN_LI0_BAT_TWV_ReqMotorOptRecovery_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET    21U
#define LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET    3U


#define LIN_LI0_BAT_TWV_RESP_ERROR_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_RESP_ERROR_BIT_OFFSET    0U
#define LIN_LI0_BAT_TWV_RESP_ERROR_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BIT_OFFSET    0U


#define LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET    101U
#define LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET    1U
#define LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET    1U


#define LIN_LI0_BAT_TWV_OverCurrent_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_OverCurrent_BIT_OFFSET    2U
#define LIN_LI0_BAT_TWV_OverCurrent_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_OverCurrent_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_OverCurrent_FLAG_BIT_OFFSET    2U


#define LIN_LI0_BAT_TWV_OverTempFlt_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_OverTempFlt_BIT_OFFSET    3U
#define LIN_LI0_BAT_TWV_OverTempFlt_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BIT_OFFSET    3U


#define LIN_LI0_BAT_TWV_UnderVoltageFlt_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_UnderVoltageFlt_BIT_OFFSET    4U
#define LIN_LI0_BAT_TWV_UnderVoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET    4U


#define LIN_LI0_BAT_TWV_InitSta_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_InitSta_BIT_OFFSET    5U
#define LIN_LI0_BAT_TWV_InitSta_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_InitSta_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_InitSta_FLAG_BIT_OFFSET    5U


#define LIN_LI0_BAT_TWV_CCWFlg_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_CCWFlg_BIT_OFFSET    6U
#define LIN_LI0_BAT_TWV_CCWFlg_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_CCWFlg_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_CCWFlg_FLAG_BIT_OFFSET    6U


#define LIN_LI0_BAT_TWV_MotorSta_BYTE_OFFSET    101U
#define LIN_LI0_BAT_TWV_MotorSta_BIT_OFFSET    7U
#define LIN_LI0_BAT_TWV_MotorSta_SIGNAL_SIZE    1U
#define LIN_LI0_BAT_TWV_MotorSta_FLAG_BYTE_OFFSET    22U
#define LIN_LI0_BAT_TWV_MotorSta_FLAG_BIT_OFFSET    7U


#define LIN_LI0_BAT_TWV_RealSta_BYTE_OFFSET    102U
#define LIN_LI0_BAT_TWV_RealSta_BIT_OFFSET    0U
#define LIN_LI0_BAT_TWV_RealSta_SIGNAL_SIZE    8U
#define LIN_LI0_BAT_TWV_RealSta_FLAG_BYTE_OFFSET    23U
#define LIN_LI0_BAT_TWV_RealSta_FLAG_BIT_OFFSET    0U


#define LIN_LI0_MOT_TWV_PosSet_BYTE_OFFSET    112U
#define LIN_LI0_MOT_TWV_PosSet_BIT_OFFSET    0U
#define LIN_LI0_MOT_TWV_PosSet_SIGNAL_SIZE    8U
#define LIN_LI0_MOT_TWV_PosSet_FLAG_BYTE_OFFSET    24U
#define LIN_LI0_MOT_TWV_PosSet_FLAG_BIT_OFFSET    0U


#define LIN_LI0_MOT_TWV_MoveEnable_BYTE_OFFSET    113U
#define LIN_LI0_MOT_TWV_MoveEnable_BIT_OFFSET    0U
#define LIN_LI0_MOT_TWV_MoveEnable_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_MoveEnable_FLAG_BYTE_OFFSET    24U
#define LIN_LI0_MOT_TWV_MoveEnable_FLAG_BIT_OFFSET    1U


#define LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BYTE_OFFSET    113U
#define LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BIT_OFFSET    4U
#define LIN_LI0_MOT_TWV_ReqMotorEmgyStop_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET    24U
#define LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET    2U


#define LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BYTE_OFFSET    113U
#define LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BIT_OFFSET    5U
#define LIN_LI0_MOT_TWV_ReqMotorOptRecovery_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET    24U
#define LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET    3U


#define LIN_LI0_MOT_TWV_RESP_ERROR_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_RESP_ERROR_BIT_OFFSET    0U
#define LIN_LI0_MOT_TWV_RESP_ERROR_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BIT_OFFSET    0U


#define LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET    117U
#define LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET    1U
#define LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET    1U


#define LIN_LI0_MOT_TWV_OverCurrent_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_OverCurrent_BIT_OFFSET    2U
#define LIN_LI0_MOT_TWV_OverCurrent_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_OverCurrent_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_OverCurrent_FLAG_BIT_OFFSET    2U


#define LIN_LI0_MOT_TWV_OverTempFlt_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_OverTempFlt_BIT_OFFSET    3U
#define LIN_LI0_MOT_TWV_OverTempFlt_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BIT_OFFSET    3U


#define LIN_LI0_MOT_TWV_UnderVoltageFlt_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_UnderVoltageFlt_BIT_OFFSET    4U
#define LIN_LI0_MOT_TWV_UnderVoltageFlt_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET    4U


#define LIN_LI0_MOT_TWV_InitSta_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_InitSta_BIT_OFFSET    5U
#define LIN_LI0_MOT_TWV_InitSta_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_InitSta_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_InitSta_FLAG_BIT_OFFSET    5U


#define LIN_LI0_MOT_TWV_CCWFlg_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_CCWFlg_BIT_OFFSET    6U
#define LIN_LI0_MOT_TWV_CCWFlg_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_CCWFlg_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_CCWFlg_FLAG_BIT_OFFSET    6U


#define LIN_LI0_MOT_TWV_MotorSta_BYTE_OFFSET    117U
#define LIN_LI0_MOT_TWV_MotorSta_BIT_OFFSET    7U
#define LIN_LI0_MOT_TWV_MotorSta_SIGNAL_SIZE    1U
#define LIN_LI0_MOT_TWV_MotorSta_FLAG_BYTE_OFFSET    25U
#define LIN_LI0_MOT_TWV_MotorSta_FLAG_BIT_OFFSET    7U


#define LIN_LI0_MOT_TWV_RealSta_BYTE_OFFSET    118U
#define LIN_LI0_MOT_TWV_RealSta_BIT_OFFSET    0U
#define LIN_LI0_MOT_TWV_RealSta_SIGNAL_SIZE    8U
#define LIN_LI0_MOT_TWV_RealSta_FLAG_BYTE_OFFSET    26U
#define LIN_LI0_MOT_TWV_RealSta_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_HVAC_CTRL_byNAD_BYTE_OFFSET    125U
#define LIN_LI0_PUMP_HVAC_CTRL_byNAD_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byNAD_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_HVAC_CTRL_byProgram_BYTE_OFFSET    126U
#define LIN_LI0_PUMP_HVAC_CTRL_byProgram_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byProgram_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_BYTE_OFFSET    126U
#define LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_BIT_OFFSET    2U
#define LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_BYTE_OFFSET    126U
#define LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_BIT_OFFSET    4U
#define LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_SIGNAL_SIZE    4U
#define LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET    127U
#define LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_HVAC_CTRL_byReserved4_BYTE_OFFSET    129U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved4_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved4_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_HVAC_CTRL_byReserved5_BYTE_OFFSET    130U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved5_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved5_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_HVAC_CTRL_byReserved6_BYTE_OFFSET    131U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved6_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved6_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BYTE_OFFSET    27U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_HVAC_CTRL_byReserved7_BYTE_OFFSET    132U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved7_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved7_SIGNAL_SIZE    6U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BYTE_OFFSET    28U
#define LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_HVAC_CTRL_byStopMode_BYTE_OFFSET    132U
#define LIN_LI0_PUMP_HVAC_CTRL_byStopMode_BIT_OFFSET    6U
#define LIN_LI0_PUMP_HVAC_CTRL_byStopMode_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BYTE_OFFSET    28U
#define LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BYTE_OFFSET    133U
#define LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_byResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BYTE_OFFSET    133U
#define LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BIT_OFFSET    1U
#define LIN_LI0_PUMP_HVAC_STATUS_byReserved1_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_BYTE_OFFSET    133U
#define LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_BIT_OFFSET    2U
#define LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_BYTE_OFFSET    133U
#define LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_BIT_OFFSET    4U
#define LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_BYTE_OFFSET    133U
#define LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_BIT_OFFSET    6U
#define LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_BYTE_OFFSET    134U
#define LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_BYTE_OFFSET    134U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_BIT_OFFSET    2U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_BYTE_OFFSET    134U
#define LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_BIT_OFFSET    4U
#define LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_SIGNAL_SIZE    3U
#define LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BYTE_OFFSET    29U
#define LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_HVAC_STATUS_byReset_BYTE_OFFSET    134U
#define LIN_LI0_PUMP_HVAC_STATUS_byReset_BIT_OFFSET    7U
#define LIN_LI0_PUMP_HVAC_STATUS_byReset_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET    135U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET    137U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualLA_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_BYTE_OFFSET    139U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_HVAC_STATUS_byFocMode_BYTE_OFFSET    140U
#define LIN_LI0_PUMP_HVAC_STATUS_byFocMode_BIT_OFFSET    0U
#define LIN_LI0_PUMP_HVAC_STATUS_byFocMode_SIGNAL_SIZE    7U
#define LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BYTE_OFFSET    140U
#define LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BIT_OFFSET    7U
#define LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BYTE_OFFSET    30U
#define LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_BAT_CTRL_byNAD_BYTE_OFFSET    141U
#define LIN_LI0_PUMP_BAT_CTRL_byNAD_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byNAD_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_BAT_CTRL_byProgram_BYTE_OFFSET    142U
#define LIN_LI0_PUMP_BAT_CTRL_byProgram_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byProgram_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_BAT_CTRL_byStallDetector_BYTE_OFFSET    142U
#define LIN_LI0_PUMP_BAT_CTRL_byStallDetector_BIT_OFFSET    2U
#define LIN_LI0_PUMP_BAT_CTRL_byStallDetector_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_BYTE_OFFSET    142U
#define LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_BIT_OFFSET    4U
#define LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_SIGNAL_SIZE    4U
#define LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET    143U
#define LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_BAT_CTRL_byReserved4_BYTE_OFFSET    145U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved4_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved4_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_BAT_CTRL_byReserved5_BYTE_OFFSET    146U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved5_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved5_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_BAT_CTRL_byReserved6_BYTE_OFFSET    147U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved6_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved6_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BYTE_OFFSET    31U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_BAT_CTRL_byReserved7_BYTE_OFFSET    148U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved7_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved7_SIGNAL_SIZE    6U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BYTE_OFFSET    32U
#define LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_BAT_CTRL_byStopMode_BYTE_OFFSET    148U
#define LIN_LI0_PUMP_BAT_CTRL_byStopMode_BIT_OFFSET    6U
#define LIN_LI0_PUMP_BAT_CTRL_byStopMode_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BYTE_OFFSET    32U
#define LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_BAT_STATUS_byResponseError_BYTE_OFFSET    149U
#define LIN_LI0_PUMP_BAT_STATUS_byResponseError_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_byResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_BAT_STATUS_byReserved1_BYTE_OFFSET    149U
#define LIN_LI0_PUMP_BAT_STATUS_byReserved1_BIT_OFFSET    1U
#define LIN_LI0_PUMP_BAT_STATUS_byReserved1_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_BYTE_OFFSET    149U
#define LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_BIT_OFFSET    2U
#define LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_BYTE_OFFSET    149U
#define LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_BIT_OFFSET    4U
#define LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_BAT_STATUS_byVoltageError_BYTE_OFFSET    149U
#define LIN_LI0_PUMP_BAT_STATUS_byVoltageError_BIT_OFFSET    6U
#define LIN_LI0_PUMP_BAT_STATUS_byVoltageError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_BYTE_OFFSET    150U
#define LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_BAT_STATUS_bySpeedError_BYTE_OFFSET    150U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedError_BIT_OFFSET    2U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_BYTE_OFFSET    150U
#define LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_BIT_OFFSET    4U
#define LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_SIGNAL_SIZE    3U
#define LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BYTE_OFFSET    33U
#define LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_BAT_STATUS_byReset_BYTE_OFFSET    150U
#define LIN_LI0_PUMP_BAT_STATUS_byReset_BIT_OFFSET    7U
#define LIN_LI0_PUMP_BAT_STATUS_byReset_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET    151U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET    153U
#define LIN_LI0_PUMP_BAT_STATUS_byActualLA_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_byActualLA_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_BYTE_OFFSET    155U
#define LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_BAT_STATUS_byFocMode_BYTE_OFFSET    156U
#define LIN_LI0_PUMP_BAT_STATUS_byFocMode_BIT_OFFSET    0U
#define LIN_LI0_PUMP_BAT_STATUS_byFocMode_SIGNAL_SIZE    7U
#define LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BYTE_OFFSET    156U
#define LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BIT_OFFSET    7U
#define LIN_LI0_PUMP_BAT_STATUS_byPwmMode_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BYTE_OFFSET    34U
#define LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_MOTOR_CTRL_byNAD_BYTE_OFFSET    157U
#define LIN_LI0_PUMP_MOTOR_CTRL_byNAD_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byNAD_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_MOTOR_CTRL_byProgram_BYTE_OFFSET    158U
#define LIN_LI0_PUMP_MOTOR_CTRL_byProgram_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byProgram_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_BYTE_OFFSET    158U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_BIT_OFFSET    2U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_BYTE_OFFSET    158U
#define LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_BIT_OFFSET    4U
#define LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_SIGNAL_SIZE    4U
#define LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET    159U
#define LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_BYTE_OFFSET    161U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_BYTE_OFFSET    162U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_BYTE_OFFSET    163U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BYTE_OFFSET    35U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_BYTE_OFFSET    164U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_SIGNAL_SIZE    6U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BYTE_OFFSET    36U
#define LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_BYTE_OFFSET    164U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_BIT_OFFSET    6U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BYTE_OFFSET    36U
#define LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BYTE_OFFSET    165U
#define LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BYTE_OFFSET    165U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BIT_OFFSET    1U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_BYTE_OFFSET    165U
#define LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_BIT_OFFSET    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_BYTE_OFFSET    165U
#define LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_BIT_OFFSET    4U
#define LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_BYTE_OFFSET    165U
#define LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_BIT_OFFSET    6U
#define LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_BYTE_OFFSET    166U
#define LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_BYTE_OFFSET    166U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_BIT_OFFSET    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_SIGNAL_SIZE    2U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BIT_OFFSET    6U


#define LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_BYTE_OFFSET    166U
#define LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_BIT_OFFSET    4U
#define LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_SIGNAL_SIZE    3U
#define LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BYTE_OFFSET    37U
#define LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PUMP_MOTOR_STATUS_byReset_BYTE_OFFSET    166U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReset_BIT_OFFSET    7U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReset_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET    167U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET    169U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_SIGNAL_SIZE    16U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_BYTE_OFFSET    171U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_SIGNAL_SIZE    8U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_BYTE_OFFSET    172U
#define LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_BIT_OFFSET    0U
#define LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_SIGNAL_SIZE    7U
#define LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BYTE_OFFSET    172U
#define LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BIT_OFFSET    7U
#define LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_SIGNAL_SIZE    1U
#define LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BYTE_OFFSET    38U
#define LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BIT_OFFSET    5U



/**********************************************************************/
/***************        Static API Functions        *******************/
/**********************************************************************/
/*
 * the static signal access macros
 */


 
/* static access macros for signal LI0_TEMP_EAU_CPT_BT */
 
#define l_u8_rd_LI0_TEMP_EAU_CPT_BT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_TEMP_EAU_CPT_BT_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_TEMP_EAU_CPT_BT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_TEMP_EAU_CPT_BT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TEMP_EAU_CPT_BT_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_I_CONSO_CTP_EAU_BT */
 
#define l_u16_rd_LI0_I_CONSO_CTP_EAU_BT() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0x1ffU))


#define l_u16_wr_LI0_I_CONSO_CTP_EAU_BT(A) \
    { \
    g_buffer_backup_data[1U] =  g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] |= (1U << 1); \
    g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[1U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] |= (1U << (1 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_I_CONSO_CTP_EAU_BT_BYTE_OFFSET + 1U] & 0xfeU) | \
    (((A) >> 8U) & 0x01U)); \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] &= (~(0x03 << 1)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_DEFAUT_CTP_EAU */

 
#define l_bool_rd_LI0_DEFAUT_CTP_EAU() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_CTP_EAU_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_CTP_EAU_BIT_OFFSET))

#define l_bool_wr_LI0_DEFAUT_CTP_EAU(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_CTP_EAU_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_CTP_EAU_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_CTP_EAU_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_CTP_EAU_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_CTP_EAU_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_CTP_EAU_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_DEFAUT_SECU_CTP_EAU_BT */

 
#define l_bool_rd_LI0_DEFAUT_SECU_CTP_EAU_BT() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BIT_OFFSET))

#define l_bool_wr_LI0_DEFAUT_SECU_CTP_EAU_BT(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BYTE_OFFSET], \
    LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_RESP_ERROR_CTPE */

 
#define l_bool_rd_LI0_RESP_ERROR_CTPE() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_RESP_ERROR_CTPE_BYTE_OFFSET], \
    LIN_LI0_RESP_ERROR_CTPE_BIT_OFFSET))

#define l_bool_wr_LI0_RESP_ERROR_CTPE(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_RESP_ERROR_CTPE_BYTE_OFFSET], \
    LIN_LI0_RESP_ERROR_CTPE_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_RESP_ERROR_CTPE_BYTE_OFFSET], \
    LIN_LI0_RESP_ERROR_CTPE_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESP_ERROR_CTPE_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESP_ERROR_CTPE_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_INTERLOCK_STATUS */

 
#define l_bool_rd_LI0_INTERLOCK_STATUS() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_INTERLOCK_STATUS_BYTE_OFFSET], \
    LIN_LI0_INTERLOCK_STATUS_BIT_OFFSET))

#define l_bool_wr_LI0_INTERLOCK_STATUS(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_INTERLOCK_STATUS_BYTE_OFFSET], \
    LIN_LI0_INTERLOCK_STATUS_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_INTERLOCK_STATUS_BYTE_OFFSET], \
    LIN_LI0_INTERLOCK_STATUS_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_INTERLOCK_STATUS_FLAG_BYTE_OFFSET],\
         LIN_LI0_INTERLOCK_STATUS_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_LIMIT_POWER_HVWH */

 
#define l_bool_rd_LI0_LIMIT_POWER_HVWH() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_LIMIT_POWER_HVWH_BYTE_OFFSET], \
    LIN_LI0_LIMIT_POWER_HVWH_BIT_OFFSET))

#define l_bool_wr_LI0_LIMIT_POWER_HVWH(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_LIMIT_POWER_HVWH_BYTE_OFFSET], \
    LIN_LI0_LIMIT_POWER_HVWH_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_LIMIT_POWER_HVWH_BYTE_OFFSET], \
    LIN_LI0_LIMIT_POWER_HVWH_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_LIMIT_POWER_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_LIMIT_POWER_HVWH_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_RESERV_2 */
 
#define l_u8_rd_LI0_RESERV_2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_RESERV_2_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_RESERV_2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_RESERV_2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERV_2_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_ALIM_BT */
 
#define l_u8_rd_LI0_DEFAUT_ALIM_BT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_ALIM_BT_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_ALIM_BT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_ALIM_BT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_ALIM_BT_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_ALIM_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_ALIM_BT_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_FONCT_INTEMPESTIF */
 
#define l_u8_rd_LI0_DEFAUT_FONCT_INTEMPESTIF() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_FONCT_INTEMPESTIF(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_NON_FONCT_PERM */
 
#define l_u8_rd_LI0_DEFAUT_NON_FONCT_PERM() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_NON_FONCT_PERM_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_NON_FONCT_PERM(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_NON_FONCT_PERM_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_NON_FONCT_PERM_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_PROTECTION */
 
#define l_u8_rd_LI0_DEFAUT_PROTECTION() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_PROTECTION_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_PROTECTION(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_PROTECTION_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_PROTECTION_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_PROTECTION_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_PROTECTION_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_SONDE_TEMP */
 
#define l_u8_rd_LI0_DEFAUT_SONDE_TEMP() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SONDE_TEMP_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_SONDE_TEMP(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SONDE_TEMP_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_SONDE_TEMP_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_DEFAUT_TENSION_BT */
 
#define l_u8_rd_LI0_DEFAUT_TENSION_BT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_TENSION_BT_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_DEFAUT_TENSION_BT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_DEFAUT_TENSION_BT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_DEFAUT_TENSION_BT_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_TENSION_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_TENSION_BT_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_TENSION_LV_CTPE_ELEC */
 
#define l_u8_rd_LI0_TENSION_LV_CTPE_ELEC() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_TENSION_LV_CTPE_ELEC_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_TENSION_LV_CTPE_ELEC(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_TENSION_LV_CTPE_ELEC_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_TENSION_LV_CTPE_ELEC_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BYTE_OFFSET],\
         LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RESERV_9 */
 
#define l_u16_rd_LI0_RESERV_9() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET + 1U] << 8U)) >> 7U) & 0x1ffU))


#define l_u16_wr_LI0_RESERV_9(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET] & 0x7fU) | \
    (((A) << 7U) & 0x80U)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERV_9_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 1U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_LIN_STATUS1] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_9_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_9_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CMD_CTPE_EAU_BT */
 
#define l_u8_rd_LI0_CMD_CTPE_EAU_BT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CMD_CTPE_EAU_BT_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_CMD_CTPE_EAU_BT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CMD_CTPE_EAU_BT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CMD_CTPE_EAU_BT_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_COUPURE_CONSO_CPT */

 
#define l_bool_rd_LI0_COUPURE_CONSO_CPT() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_COUPURE_CONSO_CPT_BYTE_OFFSET], \
    LIN_LI0_COUPURE_CONSO_CPT_BIT_OFFSET))

#define l_bool_wr_LI0_COUPURE_CONSO_CPT(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_COUPURE_CONSO_CPT_BYTE_OFFSET], \
    LIN_LI0_COUPURE_CONSO_CPT_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_COUPURE_CONSO_CPT_BYTE_OFFSET], \
    LIN_LI0_COUPURE_CONSO_CPT_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_COUPURE_CONSO_CPT_FLAG_BYTE_OFFSET],\
         LIN_LI0_COUPURE_CONSO_CPT_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_CMD_PWR_LIMIT_HVWH */
 
#define l_u8_rd_LI0_CMD_PWR_LIMIT_HVWH() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CMD_PWR_LIMIT_HVWH_BYTE_OFFSET]) >> 1U) & 0x7fU))


#define l_u8_wr_LI0_CMD_PWR_LIMIT_HVWH(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CMD_PWR_LIMIT_HVWH_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CMD_PWR_LIMIT_HVWH_BYTE_OFFSET] & 0x01U) | \
    (((A) << 1U) & 0xfeU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CDE_PV_LIN */
 
#define l_u8_rd_LI0_CDE_PV_LIN() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CDE_PV_LIN_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_CDE_PV_LIN(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CDE_PV_LIN_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CDE_PV_LIN_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CDE_PV_LIN_FLAG_BYTE_OFFSET],\
         LIN_LI0_CDE_PV_LIN_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RESERVE_8 */
 
#define l_u8_rd_LI0_RESERVE_8() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_8_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_RESERVE_8(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_8_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_8_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_8_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RESERVE_16 */
 
#define l_u16_rd_LI0_RESERVE_16() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_RESERVE_16(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RESERVE_16_2 */
 
#define l_u16_rd_LI0_RESERVE_16_2() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_RESERVE_16_2(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_2_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RESERVE_16_3 */
 
#define l_u16_rd_LI0_RESERVE_16_3() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_RESERVE_16_3(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_16_3_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_HVWH_SET_2] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_3_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_3_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CompSpd_Target */
 
#define l_u8_rd_LI0_CompSpd_Target() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CompSpd_Target_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_CompSpd_Target(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CompSpd_Target_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CompSpd_Target_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Target_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Target_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_Comp_On_Rq */
 
#define l_u8_rd_LI0_Comp_On_Rq() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_On_Rq_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_Comp_On_Rq(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_On_Rq_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_On_Rq_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_On_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_On_Rq_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_Comp_Fault_Clear_Rq */
 
#define l_u8_rd_LI0_Comp_Fault_Clear_Rq() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_Fault_Clear_Rq_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_Comp_Fault_Clear_Rq(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_Fault_Clear_Rq_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_Fault_Clear_Rq_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_Comp_HvInterlock_Rq */
 
#define l_u8_rd_LI0_Comp_HvInterlock_Rq() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Rq_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_Comp_HvInterlock_Rq(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Rq_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Rq_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Rq_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_Comp_HvDischarge_Rq */
 
#define l_u8_rd_LI0_Comp_HvDischarge_Rq() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_HvDischarge_Rq_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_Comp_HvDischarge_Rq(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_HvDischarge_Rq_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_HvDischarge_Rq_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvDischarge_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvDischarge_Rq_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CompSpd_Est */
 
#define l_u8_rd_LI0_CompSpd_Est() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CompSpd_Est_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_CompSpd_Est(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CompSpd_Est_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CompSpd_Est_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Est_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Est_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EAC_HV_InputCurr */
 
#define l_u8_rd_LI0_EAC_HV_InputCurr() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EAC_HV_InputCurr_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_EAC_HV_InputCurr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EAC_HV_InputCurr_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EAC_HV_InputCurr_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_InputCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_InputCurr_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EAC_HV_Volt */
 
#define l_u8_rd_LI0_EAC_HV_Volt() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EAC_HV_Volt_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_EAC_HV_Volt(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EAC_HV_Volt_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EAC_HV_Volt_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_Volt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_Volt_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EAC_InvrtTemp */
 
#define l_u8_rd_LI0_EAC_InvrtTemp() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtTemp_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_EAC_InvrtTemp(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtTemp_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtTemp_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtTemp_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EAC_InvrtPhaseCurr */
 
#define l_u8_rd_LI0_EAC_InvrtPhaseCurr() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtPhaseCurr_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_EAC_InvrtPhaseCurr(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtPhaseCurr_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EAC_InvrtPhaseCurr_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EAC_Sp_BrdTemp_Lmt */

 
#define l_bool_rd_LI0_EAC_Sp_BrdTemp_Lmt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_BrdTemp_Lmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_BrdTemp_Lmt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_BrdTemp_Lmt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_BrdTemp_Lmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_BrdTemp_Lmt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_BrdTemp_Lmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_BrdTemp_Lmt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Sp_CurrLmt */

 
#define l_bool_rd_LI0_EAC_Sp_CurrLmt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_CurrLmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_CurrLmt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_CurrLmt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_CurrLmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_CurrLmt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_CurrLmt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_CurrLmt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_CurrLmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_CurrLmt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Sp_HVVolt_Flt */

 
#define l_bool_rd_LI0_EAC_Sp_HVVolt_Flt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_HVVolt_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_HVVolt_Flt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_HVVolt_Flt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_HVVolt_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_HVVolt_Flt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_HVVolt_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_HVVolt_Flt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Sp_Temp_Excess */

 
#define l_bool_rd_LI0_EAC_Sp_Temp_Excess() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Temp_Excess_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Temp_Excess_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_Temp_Excess(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Temp_Excess_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Temp_Excess_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Temp_Excess_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Temp_Excess_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Sp_Comm_Flt */

 
#define l_bool_rd_LI0_EAC_Sp_Comm_Flt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Comm_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Comm_Flt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_Comm_Flt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Comm_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Comm_Flt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_Comm_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_Comm_Flt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Sp_InvrtPwrSup_Flt */

 
#define l_bool_rd_LI0_EAC_Sp_InvrtPwrSup_Flt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Sp_InvrtPwrSup_Flt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Off_Sens_Flt */

 
#define l_bool_rd_LI0_EAC_Off_Sens_Flt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Sens_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Sens_Flt_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Off_Sens_Flt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Sens_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Sens_Flt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Sens_Flt_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Sens_Flt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Sens_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Sens_Flt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Off_ShrtCurr */

 
#define l_bool_rd_LI0_EAC_Off_ShrtCurr() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_ShrtCurr_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_ShrtCurr_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Off_ShrtCurr(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_ShrtCurr_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_ShrtCurr_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_ShrtCurr_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_ShrtCurr_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_ShrtCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_ShrtCurr_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_Off_Stall */

 
#define l_bool_rd_LI0_EAC_Off_Stall() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Stall_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Stall_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_Off_Stall(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Stall_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Stall_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_Off_Stall_BYTE_OFFSET], \
    LIN_LI0_EAC_Off_Stall_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Stall_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Stall_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EAC_RsErr */

 
#define l_bool_rd_LI0_EAC_RsErr() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_RsErr_BYTE_OFFSET], \
    LIN_LI0_EAC_RsErr_BIT_OFFSET))

#define l_bool_wr_LI0_EAC_RsErr(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_RsErr_BYTE_OFFSET], \
    LIN_LI0_EAC_RsErr_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EAC_RsErr_BYTE_OFFSET], \
    LIN_LI0_EAC_RsErr_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_RsErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_RsErr_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_Comp_HvInterlock_Stat */
 
#define l_u8_rd_LI0_Comp_HvInterlock_Stat() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Stat_BYTE_OFFSET]) >> 2U) & 0x07U))


#define l_u8_wr_LI0_Comp_HvInterlock_Stat(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Stat_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_HvInterlock_Stat_BYTE_OFFSET] & 0xe3U) | \
    (((A) << 2U) & 0x1cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Stat_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_Comp_Oprtn_Stat */
 
#define l_u8_rd_LI0_Comp_Oprtn_Stat() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_Comp_Oprtn_Stat_BYTE_OFFSET]) >> 5U) & 0x07U))


#define l_u8_wr_LI0_Comp_Oprtn_Stat(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_Comp_Oprtn_Stat_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_Comp_Oprtn_Stat_BYTE_OFFSET] & 0x1fU) | \
    (((A) << 5U) & 0xe0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Oprtn_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Oprtn_Stat_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_DIAG_FLAG1 */
 
#define l_u8_rd_LI0_BLOWER_DIAG_FLAG1() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG1_BYTE_OFFSET]) >> 3U) & 0x0fU))


#define l_u8_wr_LI0_BLOWER_DIAG_FLAG1(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG1_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG1_BYTE_OFFSET] & 0x87U) | \
    (((A) << 3U) & 0x78U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_DIAG_FLAG2 */
 
#define l_u8_rd_LI0_BLOWER_DIAG_FLAG2() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG2_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_DIAG_FLAG2(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG2_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_DIAG_FLAG2_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_IBATT */
 
#define l_u8_rd_LI0_BLOWER_IBATT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_IBATT_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_IBATT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_IBATT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_IBATT_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_IBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_IBATT_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BLOWER_ResponseError */

 
#define l_bool_rd_LI0_BLOWER_ResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BLOWER_ResponseError_BYTE_OFFSET], \
    LIN_LI0_BLOWER_ResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_BLOWER_ResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BLOWER_ResponseError_BYTE_OFFSET], \
    LIN_LI0_BLOWER_ResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BLOWER_ResponseError_BYTE_OFFSET], \
    LIN_LI0_BLOWER_ResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ResponseError_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_BLOWER_ROTATION_SPEED */
 
#define l_u8_rd_LI0_BLOWER_ROTATION_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_ROTATION_SPEED_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_ROTATION_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_ROTATION_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_ROTATION_SPEED_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_STATUS_MOTOR */
 
#define l_u8_rd_LI0_BLOWER_STATUS_MOTOR() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_STATUS_MOTOR_BYTE_OFFSET]) >> 0U) & 0x07U))


#define l_u8_wr_LI0_BLOWER_STATUS_MOTOR(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_STATUS_MOTOR_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_STATUS_MOTOR_BYTE_OFFSET] & 0xf8U) | \
    (((A) << 0U) & 0x07U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_SUPPLIER */
 
#define l_u8_rd_LI0_BLOWER_SUPPLIER() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_SUPPLIER_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_SUPPLIER(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_SUPPLIER_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_SUPPLIER_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SUPPLIER_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SUPPLIER_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_TEMPERATURE */
 
#define l_u8_rd_LI0_BLOWER_TEMPERATURE() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_TEMPERATURE_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_TEMPERATURE(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_TEMPERATURE_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_TEMPERATURE_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TEMPERATURE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TEMPERATURE_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_TORQUE */
 
#define l_u16_rd_LI0_BLOWER_TORQUE() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0x3ffU))


#define l_u16_wr_LI0_BLOWER_TORQUE(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Status2] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Status2] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_TORQUE_BYTE_OFFSET + 1U] & 0xfcU) | \
    (((A) >> 8U) & 0x03U)); \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Status2] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TORQUE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TORQUE_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_UBATT */
 
#define l_u8_rd_LI0_BLOWER_UBATT() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_UBATT_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_UBATT(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_UBATT_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_UBATT_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UBATT_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_UMOTOR */
 
#define l_u8_rd_LI0_BLOWER_UMOTOR() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_UMOTOR_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_UMOTOR(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_UMOTOR_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_UMOTOR_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UMOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UMOTOR_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_CODE_VEHICULE */
 
#define l_u8_rd_LI0_CODE_VEHICULE() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_CODE_VEHICULE_BYTE_OFFSET]) >> 0U) & 0x0fU))


#define l_u8_wr_LI0_CODE_VEHICULE(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_CODE_VEHICULE_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_CODE_VEHICULE_BYTE_OFFSET] & 0xf0U) | \
    (((A) << 0U) & 0x0fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CODE_VEHICULE_FLAG_BYTE_OFFSET],\
         LIN_LI0_CODE_VEHICULE_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_RAMP */
 
#define l_u8_rd_LI0_BLOWER_RAMP() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_RAMP_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_BLOWER_RAMP(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_RAMP_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_RAMP_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_RAMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_RAMP_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_RX_FREQUENCY */
 
#define l_u16_rd_LI0_RX_FREQUENCY() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xfffU))


#define l_u16_wr_LI0_RX_FREQUENCY(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Cmd] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Cmd] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RX_FREQUENCY_BYTE_OFFSET + 1U] & 0xf0U) | \
    (((A) >> 8U) & 0x0fU)); \
    g_lin_frame_updating_flag_tbl[LI0_BLW_Cmd] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RX_FREQUENCY_FLAG_BYTE_OFFSET],\
         LIN_LI0_RX_FREQUENCY_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_SAFETY_SPEED */
 
#define l_u8_rd_LI0_SAFETY_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_SAFETY_SPEED_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_SAFETY_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_SAFETY_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_SAFETY_SPEED_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_SAFETY_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_SAFETY_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BLOWER_SPEED */
 
#define l_u8_rd_LI0_BLOWER_SPEED() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BLOWER_SPEED_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BLOWER_SPEED(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BLOWER_SPEED_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BLOWER_SPEED_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SPEED_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Position_Feedback */
 
#define l_u16_rd_LI0_EXV1_Position_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV1_Position_Feedback(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_Feedback_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV1_Movement_Status */

 
#define l_bool_rd_LI0_EXV1_Movement_Status() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Movement_Status_BIT_OFFSET))

#define l_bool_wr_LI0_EXV1_Movement_Status(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Movement_Status_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Movement_Status_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Movement_Status_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV1_Stall_Detect */

 
#define l_bool_rd_LI0_EXV1_Stall_Detect() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV1_Stall_Detect_BIT_OFFSET))

#define l_bool_wr_LI0_EXV1_Stall_Detect(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV1_Stall_Detect_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV1_Stall_Detect_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Stall_Detect_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV1_Detect_Status */

 
#define l_bool_rd_LI0_EXV1_Detect_Status() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Detect_Status_BIT_OFFSET))

#define l_bool_wr_LI0_EXV1_Detect_Status(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Detect_Status_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV1_Detect_Status_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Detect_Status_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV1_Communication_Error */

 
#define l_bool_rd_LI0_EXV1_Communication_Error() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV1_Communication_Error_BIT_OFFSET))

#define l_bool_wr_LI0_EXV1_Communication_Error(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV1_Communication_Error_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV1_Communication_Error_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Communication_Error_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_EXV1_Internal_Fault */
 
#define l_u8_rd_LI0_EXV1_Internal_Fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Internal_Fault_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_EXV1_Internal_Fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Internal_Fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Internal_Fault_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Internal_Fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Protection_fault */
 
#define l_u8_rd_LI0_EXV1_Protection_fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Protection_fault_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_EXV1_Protection_fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Protection_fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Protection_fault_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Protection_fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Voltage_Fault */
 
#define l_u8_rd_LI0_EXV1_Voltage_Fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Voltage_Fault_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_EXV1_Voltage_Fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Voltage_Fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Voltage_Fault_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Voltage_Fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Position_fault */
 
#define l_u8_rd_LI0_EXV1_Position_fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_fault_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_EXV1_Position_fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Position_fault_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Pressure_Feedback */
 
#define l_u16_rd_LI0_EXV1_Pressure_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV1_Pressure_Feedback(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pressure_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pressure_Feedback_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Temperature_Feedback */
 
#define l_u16_rd_LI0_EXV1_Temperature_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV1_Temperature_Feedback(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Temperature_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Status] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Temperature_Feedback_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Pos_Cmd */
 
#define l_u16_rd_LI0_EXV1_Pos_Cmd() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV1_Pos_Cmd(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Pos_Cmd_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pos_Cmd_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV1_Select_Cmd */
 
#define l_u8_rd_LI0_EXV1_Select_Cmd() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV1_Select_Cmd_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_EXV1_Select_Cmd(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV1_Select_Cmd_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV1_Select_Cmd_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Select_Cmd_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV1_Initial_Cmd */

 
#define l_bool_rd_LI0_EXV1_Initial_Cmd() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV1_Initial_Cmd_BIT_OFFSET))

#define l_bool_wr_LI0_EXV1_Initial_Cmd(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV1_Initial_Cmd_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV1_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV1_Initial_Cmd_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Initial_Cmd_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_RESERVE_EXV1_5 */

 
#define l_bool_rd_LI0_RESERVE_EXV1_5() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV1_5_BIT_OFFSET))

#define l_bool_wr_LI0_RESERVE_EXV1_5(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV1_5_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV1_5_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_5_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_RESERVE_EXV1_8 */
 
#define l_u16_rd_LI0_RESERVE_EXV1_8() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_RESERVE_EXV1_8(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV1_8_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_CHILLER_Cmd] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_8_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Position_Feedback */
 
#define l_u16_rd_LI0_EXV2_Position_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV2_Position_Feedback(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_Feedback_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV2_Movement_Status */

 
#define l_bool_rd_LI0_EXV2_Movement_Status() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Movement_Status_BIT_OFFSET))

#define l_bool_wr_LI0_EXV2_Movement_Status(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Movement_Status_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Movement_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Movement_Status_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Movement_Status_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV2_Stall_Detect */

 
#define l_bool_rd_LI0_EXV2_Stall_Detect() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV2_Stall_Detect_BIT_OFFSET))

#define l_bool_wr_LI0_EXV2_Stall_Detect(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV2_Stall_Detect_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Stall_Detect_BYTE_OFFSET], \
    LIN_LI0_EXV2_Stall_Detect_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Stall_Detect_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV2_Detect_Status */

 
#define l_bool_rd_LI0_EXV2_Detect_Status() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Detect_Status_BIT_OFFSET))

#define l_bool_wr_LI0_EXV2_Detect_Status(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Detect_Status_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Detect_Status_BYTE_OFFSET], \
    LIN_LI0_EXV2_Detect_Status_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Detect_Status_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_EXV2_Communication_Error */

 
#define l_bool_rd_LI0_EXV2_Communication_Error() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV2_Communication_Error_BIT_OFFSET))

#define l_bool_wr_LI0_EXV2_Communication_Error(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV2_Communication_Error_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Communication_Error_BYTE_OFFSET], \
    LIN_LI0_EXV2_Communication_Error_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Communication_Error_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_EXV2_Internal_Fault */
 
#define l_u8_rd_LI0_EXV2_Internal_Fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Internal_Fault_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_EXV2_Internal_Fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Internal_Fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Internal_Fault_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Internal_Fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Protection_fault */
 
#define l_u8_rd_LI0_EXV2_Protection_fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Protection_fault_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_EXV2_Protection_fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Protection_fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Protection_fault_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Protection_fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Voltage_Fault */
 
#define l_u8_rd_LI0_EXV2_Voltage_Fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Voltage_Fault_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_EXV2_Voltage_Fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Voltage_Fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Voltage_Fault_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Voltage_Fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Position_fault */
 
#define l_u8_rd_LI0_EXV2_Position_fault() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_fault_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_EXV2_Position_fault(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_fault_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Position_fault_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_fault_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Pressure_Feedback */
 
#define l_u16_rd_LI0_EXV2_Pressure_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV2_Pressure_Feedback(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pressure_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pressure_Feedback_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Temperature_Feedback */
 
#define l_u16_rd_LI0_EXV2_Temperature_Feedback() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV2_Temperature_Feedback(A) \
    { \
    g_buffer_backup_data[6U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << 6); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[6U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] |= (1U << (6 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Temperature_Feedback_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Status] &= (~(0x03 << 6)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Temperature_Feedback_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Pos_Cmd */
 
#define l_u16_rd_LI0_EXV2_Pos_Cmd() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_EXV2_Pos_Cmd(A) \
    { \
    g_buffer_backup_data[0U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] |= (1U << 0); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[0U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] |= (1U << (0 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Pos_Cmd_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] &= (~(0x03 << 0)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pos_Cmd_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_EXV2_Select_Cmd */
 
#define l_u8_rd_LI0_EXV2_Select_Cmd() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_EXV2_Select_Cmd_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_EXV2_Select_Cmd(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_EXV2_Select_Cmd_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_EXV2_Select_Cmd_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Select_Cmd_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_EXV2_Initial_Cmd */

 
#define l_bool_rd_LI0_EXV2_Initial_Cmd() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV2_Initial_Cmd_BIT_OFFSET))

#define l_bool_wr_LI0_EXV2_Initial_Cmd(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV2_Initial_Cmd_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_EXV2_Initial_Cmd_BYTE_OFFSET], \
    LIN_LI0_EXV2_Initial_Cmd_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Initial_Cmd_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_RESERVE_EXV2_5 */

 
#define l_bool_rd_LI0_RESERVE_EXV2_5() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV2_5_BIT_OFFSET))

#define l_bool_wr_LI0_RESERVE_EXV2_5(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV2_5_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_5_BYTE_OFFSET], \
    LIN_LI0_RESERVE_EXV2_5_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_5_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_RESERVE_EXV2_8 */
 
#define l_u16_rd_LI0_RESERVE_EXV2_8() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET + 1U] << 8U)) >> 4U) & 0xfffU))


#define l_u16_wr_LI0_RESERVE_EXV2_8(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_RESERVE_EXV2_8_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 4U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_EXV_EVAP_Cmd] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_8_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_HVAC_TWV_PosSet */
 
#define l_u8_rd_LI0_HVAC_TWV_PosSet() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_PosSet_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_HVAC_TWV_PosSet(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_PosSet_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_PosSet_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_PosSet_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_HVAC_TWV_MoveEnable */

 
#define l_bool_rd_LI0_HVAC_TWV_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_ReqMotorEmgyStop */

 
#define l_bool_rd_LI0_HVAC_TWV_ReqMotorEmgyStop() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_ReqMotorEmgyStop(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_ReqMotorOptRecovery */

 
#define l_bool_rd_LI0_HVAC_TWV_ReqMotorOptRecovery() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_ReqMotorOptRecovery(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_RESP_ERROR */

 
#define l_bool_rd_LI0_HVAC_TWV_RESP_ERROR() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_RESP_ERROR_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_RESP_ERROR(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_RESP_ERROR_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_RESP_ERROR_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_HVAC_TWV_OvervoltageFlt */

 
#define l_bool_rd_LI0_HVAC_HVAC_TWV_OvervoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_HVAC_TWV_OvervoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_OverCurrent */

 
#define l_bool_rd_LI0_HVAC_TWV_OverCurrent() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverCurrent_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_OverCurrent(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverCurrent_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverCurrent_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_OverTempFlt */

 
#define l_bool_rd_LI0_HVAC_TWV_OverTempFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverTempFlt_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_OverTempFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverTempFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_OverTempFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_UnderVoltageFlt */

 
#define l_bool_rd_LI0_HVAC_TWV_UnderVoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_UnderVoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_UnderVoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_UnderVoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_UnderVoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_InitSta */

 
#define l_bool_rd_LI0_HVAC_TWV_InitSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_InitSta_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_InitSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_InitSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_InitSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_InitSta_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_CCWFlg */

 
#define l_bool_rd_LI0_HVAC_TWV_CCWFlg() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_CCWFlg_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_CCWFlg(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_CCWFlg_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_CCWFlg_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_HVAC_TWV_MotorSta */

 
#define l_bool_rd_LI0_HVAC_TWV_MotorSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MotorSta_BIT_OFFSET))

#define l_bool_wr_LI0_HVAC_TWV_MotorSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MotorSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_HVAC_TWV_MotorSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MotorSta_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_HVAC_TWV_RealSta */
 
#define l_u8_rd_LI0_HVAC_TWV_RealSta() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RealSta_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_HVAC_TWV_RealSta(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RealSta_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_HVAC_TWV_RealSta_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RealSta_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_BAT_TWV_PosSet */
 
#define l_u8_rd_LI0_BAT_TWV_PosSet() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_PosSet_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BAT_TWV_PosSet(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_PosSet_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_PosSet_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_PosSet_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BAT_TWV_MoveEnable */

 
#define l_bool_rd_LI0_BAT_TWV_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MoveEnable_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_ReqMotorEmgyStop */

 
#define l_bool_rd_LI0_BAT_TWV_ReqMotorEmgyStop() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_ReqMotorEmgyStop(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorEmgyStop_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_ReqMotorOptRecovery */

 
#define l_bool_rd_LI0_BAT_TWV_ReqMotorOptRecovery() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_ReqMotorOptRecovery(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_ReqMotorOptRecovery_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_RESP_ERROR */

 
#define l_bool_rd_LI0_BAT_TWV_RESP_ERROR() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_RESP_ERROR_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_RESP_ERROR(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_RESP_ERROR_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_RESP_ERROR_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_HVAC_TWV_OvervoltageFlt */

 
#define l_bool_rd_LI0_BAT_HVAC_TWV_OvervoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_HVAC_TWV_OvervoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_OverCurrent */

 
#define l_bool_rd_LI0_BAT_TWV_OverCurrent() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverCurrent_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_OverCurrent(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverCurrent_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverCurrent_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverCurrent_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_OverTempFlt */

 
#define l_bool_rd_LI0_BAT_TWV_OverTempFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverTempFlt_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_OverTempFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverTempFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_OverTempFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_UnderVoltageFlt */

 
#define l_bool_rd_LI0_BAT_TWV_UnderVoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_UnderVoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_UnderVoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_UnderVoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_UnderVoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_InitSta */

 
#define l_bool_rd_LI0_BAT_TWV_InitSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_InitSta_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_InitSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_InitSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_InitSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_InitSta_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_CCWFlg */

 
#define l_bool_rd_LI0_BAT_TWV_CCWFlg() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_CCWFlg_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_CCWFlg(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_CCWFlg_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_CCWFlg_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_CCWFlg_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_BAT_TWV_MotorSta */

 
#define l_bool_rd_LI0_BAT_TWV_MotorSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MotorSta_BIT_OFFSET))

#define l_bool_wr_LI0_BAT_TWV_MotorSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MotorSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_BAT_TWV_MotorSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MotorSta_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_BAT_TWV_RealSta */
 
#define l_u8_rd_LI0_BAT_TWV_RealSta() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RealSta_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_BAT_TWV_RealSta(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RealSta_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_BAT_TWV_RealSta_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RealSta_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_MOT_TWV_PosSet */
 
#define l_u8_rd_LI0_MOT_TWV_PosSet() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_PosSet_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_MOT_TWV_PosSet(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_PosSet_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_PosSet_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_PosSet_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_MOT_TWV_MoveEnable */

 
#define l_bool_rd_LI0_MOT_TWV_MoveEnable() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MoveEnable_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_MoveEnable(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MoveEnable_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MoveEnable_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MoveEnable_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MoveEnable_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_ReqMotorEmgyStop */

 
#define l_bool_rd_LI0_MOT_TWV_ReqMotorEmgyStop() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_ReqMotorEmgyStop(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorEmgyStop_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_ReqMotorOptRecovery */

 
#define l_bool_rd_LI0_MOT_TWV_ReqMotorOptRecovery() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_ReqMotorOptRecovery(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_ReqMotorOptRecovery_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_RESP_ERROR */

 
#define l_bool_rd_LI0_MOT_TWV_RESP_ERROR() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_RESP_ERROR_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_RESP_ERROR(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_RESP_ERROR_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RESP_ERROR_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_RESP_ERROR_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_HVAC_TWV_OvervoltageFlt */

 
#define l_bool_rd_LI0_MOT_HVAC_TWV_OvervoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_HVAC_TWV_OvervoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_OverCurrent */

 
#define l_bool_rd_LI0_MOT_TWV_OverCurrent() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverCurrent_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_OverCurrent(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverCurrent_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverCurrent_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverCurrent_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverCurrent_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_OverTempFlt */

 
#define l_bool_rd_LI0_MOT_TWV_OverTempFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverTempFlt_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_OverTempFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverTempFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_OverTempFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_OverTempFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_UnderVoltageFlt */

 
#define l_bool_rd_LI0_MOT_TWV_UnderVoltageFlt() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_UnderVoltageFlt_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_UnderVoltageFlt(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_UnderVoltageFlt_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_UnderVoltageFlt_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_UnderVoltageFlt_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_InitSta */

 
#define l_bool_rd_LI0_MOT_TWV_InitSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_InitSta_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_InitSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_InitSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_InitSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_InitSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_InitSta_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_CCWFlg */

 
#define l_bool_rd_LI0_MOT_TWV_CCWFlg() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_CCWFlg_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_CCWFlg(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_CCWFlg_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_CCWFlg_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_CCWFlg_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_CCWFlg_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_MOT_TWV_MotorSta */

 
#define l_bool_rd_LI0_MOT_TWV_MotorSta() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MotorSta_BIT_OFFSET))

#define l_bool_wr_LI0_MOT_TWV_MotorSta(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MotorSta_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_MotorSta_BYTE_OFFSET], \
    LIN_LI0_MOT_TWV_MotorSta_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MotorSta_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_MOT_TWV_RealSta */
 
#define l_u8_rd_LI0_MOT_TWV_RealSta() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RealSta_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_MOT_TWV_RealSta(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RealSta_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_MOT_TWV_RealSta_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RealSta_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byNAD */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byNAD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byNAD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byNAD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byNAD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byNAD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byProgram */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byProgram() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byProgram_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byProgram(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byProgram_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byProgram_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byStallDetector */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byStallDetector() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byStallDetector(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byClearEventFlags */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byClearEventFlags() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byClearEventFlags(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byTargetSpeed */
 
#define l_u16_rd_LI0_PUMP_HVAC_CTRL_byTargetSpeed() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_HVAC_CTRL_byTargetSpeed(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_CTRL] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_CTRL] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_CTRL] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byReserved4 */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byReserved4() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byReserved4(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byReserved5 */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byReserved5() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byReserved5(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byReserved6 */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byReserved6() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byReserved6(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byReserved7 */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byReserved7() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_BYTE_OFFSET]) >> 0U) & 0x3fU))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byReserved7(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_BYTE_OFFSET] & 0xc0U) | \
    (((A) << 0U) & 0x3fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_CTRL_byStopMode */
 
#define l_u8_rd_LI0_PUMP_HVAC_CTRL_byStopMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_CTRL_byStopMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_HVAC_STATUS_byResponseError */

 
#define l_bool_rd_LI0_PUMP_HVAC_STATUS_byResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_HVAC_STATUS_byResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byReserved1 */

 
#define l_bool_rd_LI0_PUMP_HVAC_STATUS_byReserved1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_HVAC_STATUS_byReserved1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReserved1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byOverTemperature */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byOverTemperature() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byOverTemperature(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byElectricDefect */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byElectricDefect() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byElectricDefect(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byVoltageError */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byVoltageError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byVoltageError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byEmergencyOccurred */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_bySpeedError */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_bySpeedError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_bySpeedError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byStallOccurred */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byStallOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_BYTE_OFFSET]) >> 4U) & 0x07U))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byStallOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_BYTE_OFFSET] & 0x8fU) | \
    (((A) << 4U) & 0x70U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_HVAC_STATUS_byReset */

 
#define l_bool_rd_LI0_PUMP_HVAC_STATUS_byReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReset_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_HVAC_STATUS_byReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_bySpeedStatus */
 
#define l_u16_rd_LI0_PUMP_HVAC_STATUS_bySpeedStatus() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_HVAC_STATUS_bySpeedStatus(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byActualLA */
 
#define l_u16_rd_LI0_PUMP_HVAC_STATUS_byActualLA() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_HVAC_STATUS_byActualLA(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_HVAC_STATUS] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byActualMotorVoltage */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_HVAC_STATUS_byFocMode */
 
#define l_u8_rd_LI0_PUMP_HVAC_STATUS_byFocMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_PUMP_HVAC_STATUS_byFocMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_HVAC_STATUS_byPwmMode */

 
#define l_bool_rd_LI0_PUMP_HVAC_STATUS_byPwmMode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_HVAC_STATUS_byPwmMode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byNAD */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byNAD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byNAD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byNAD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byNAD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byNAD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byProgram */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byProgram() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byProgram_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byProgram(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byProgram_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byProgram_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byStallDetector */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byStallDetector() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byStallDetector(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byClearEventFlags */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byClearEventFlags() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byClearEventFlags(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byTargetSpeed */
 
#define l_u16_rd_LI0_PUMP_BAT_CTRL_byTargetSpeed() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_BAT_CTRL_byTargetSpeed(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_CTRL] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_CTRL] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_CTRL] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byReserved4 */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byReserved4() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved4_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byReserved4(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved4_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved4_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byReserved5 */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byReserved5() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved5_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byReserved5(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved5_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved5_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byReserved6 */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byReserved6() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved6_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byReserved6(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved6_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved6_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byReserved7 */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byReserved7() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved7_BYTE_OFFSET]) >> 0U) & 0x3fU))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byReserved7(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved7_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byReserved7_BYTE_OFFSET] & 0xc0U) | \
    (((A) << 0U) & 0x3fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_CTRL_byStopMode */
 
#define l_u8_rd_LI0_PUMP_BAT_CTRL_byStopMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStopMode_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_CTRL_byStopMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStopMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_CTRL_byStopMode_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_BAT_STATUS_byResponseError */

 
#define l_bool_rd_LI0_PUMP_BAT_STATUS_byResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_BAT_STATUS_byResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PUMP_BAT_STATUS_byReserved1 */

 
#define l_bool_rd_LI0_PUMP_BAT_STATUS_byReserved1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReserved1_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_BAT_STATUS_byReserved1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReserved1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReserved1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byOverTemperature */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byOverTemperature() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byOverTemperature(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byElectricDefect */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byElectricDefect() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byElectricDefect(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byVoltageError */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byVoltageError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byVoltageError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byEmergencyOccurred */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byEmergencyOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byEmergencyOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_bySpeedError */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_bySpeedError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_bySpeedError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byStallOccurred */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byStallOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_BYTE_OFFSET]) >> 4U) & 0x07U))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byStallOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_BYTE_OFFSET] & 0x8fU) | \
    (((A) << 4U) & 0x70U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_BAT_STATUS_byReset */

 
#define l_bool_rd_LI0_PUMP_BAT_STATUS_byReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReset_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_BAT_STATUS_byReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_BAT_STATUS_bySpeedStatus */
 
#define l_u16_rd_LI0_PUMP_BAT_STATUS_bySpeedStatus() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_BAT_STATUS_bySpeedStatus(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byActualLA */
 
#define l_u16_rd_LI0_PUMP_BAT_STATUS_byActualLA() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_BAT_STATUS_byActualLA(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualLA_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_BAT_STATUS] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byActualMotorVoltage */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byActualMotorVoltage() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byActualMotorVoltage(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_BAT_STATUS_byFocMode */
 
#define l_u8_rd_LI0_PUMP_BAT_STATUS_byFocMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byFocMode_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_PUMP_BAT_STATUS_byFocMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byFocMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byFocMode_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_BAT_STATUS_byPwmMode */

 
#define l_bool_rd_LI0_PUMP_BAT_STATUS_byPwmMode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_BAT_STATUS_byPwmMode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_BAT_STATUS_byPwmMode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byNAD */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byNAD() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byNAD(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byProgram */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byProgram() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byProgram(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byStallDetector */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byStallDetector() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byStallDetector(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byClearEventFlags */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byClearEventFlags() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byClearEventFlags(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byTargetSpeed */
 
#define l_u16_rd_LI0_PUMP_MOTOR_CTRL_byTargetSpeed() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_MOTOR_CTRL_byTargetSpeed(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_CTRL] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_CTRL] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_CTRL] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byReserved4 */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byReserved4() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byReserved4(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byReserved5 */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byReserved5() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byReserved5(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byReserved6 */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byReserved6() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byReserved6(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byReserved7 */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byReserved7() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_BYTE_OFFSET]) >> 0U) & 0x3fU))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byReserved7(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_BYTE_OFFSET] & 0xc0U) | \
    (((A) << 0U) & 0x3fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_CTRL_byStopMode */
 
#define l_u8_rd_LI0_PUMP_MOTOR_CTRL_byStopMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_CTRL_byStopMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byResponseError */

 
#define l_bool_rd_LI0_PUMP_MOTOR_STATUS_byResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_MOTOR_STATUS_byResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byReserved1 */

 
#define l_bool_rd_LI0_PUMP_MOTOR_STATUS_byReserved1() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_MOTOR_STATUS_byReserved1(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byOverTemperature */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byOverTemperature() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byOverTemperature(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byElectricDefect */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byElectricDefect() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_BYTE_OFFSET]) >> 4U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byElectricDefect(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_BYTE_OFFSET] & 0xcfU) | \
    (((A) << 4U) & 0x30U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byVoltageError */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byVoltageError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_BYTE_OFFSET]) >> 6U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byVoltageError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_BYTE_OFFSET] & 0x3fU) | \
    (((A) << 6U) & 0xc0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_BYTE_OFFSET]) >> 0U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_BYTE_OFFSET] & 0xfcU) | \
    (((A) << 0U) & 0x03U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_bySpeedError */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_bySpeedError() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_BYTE_OFFSET]) >> 2U) & 0x03U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_bySpeedError(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_BYTE_OFFSET] & 0xf3U) | \
    (((A) << 2U) & 0x0cU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byStallOccurred */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byStallOccurred() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_BYTE_OFFSET]) >> 4U) & 0x07U))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byStallOccurred(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_BYTE_OFFSET] & 0x8fU) | \
    (((A) << 4U) & 0x70U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byReset */

 
#define l_bool_rd_LI0_PUMP_MOTOR_STATUS_byReset() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReset_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_MOTOR_STATUS_byReset(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReset_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byReset_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byReset_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_bySpeedStatus */
 
#define l_u16_rd_LI0_PUMP_MOTOR_STATUS_bySpeedStatus() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_MOTOR_STATUS_bySpeedStatus(A) \
    { \
    g_buffer_backup_data[2U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] |= (1U << 2); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[2U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] |= (1U << (2 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] &= (~(0x03 << 2)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byActualLA */
 
#define l_u16_rd_LI0_PUMP_MOTOR_STATUS_byActualLA() \
    ((l_u16)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET] + (g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET + 1U] << 8U)) >> 0U) & 0xffffU))


#define l_u16_wr_LI0_PUMP_MOTOR_STATUS_byActualLA(A) \
    { \
    g_buffer_backup_data[4U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] |= (1U << 4); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    g_buffer_backup_data[4U + 1U] =  g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET + 1U]; \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] |= (1U << (4 + 1U)); \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET + 1U] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_BYTE_OFFSET + 1U] & 0x00U) | \
    (((A) >> 8U) & 0xffU)); \
    g_lin_frame_updating_flag_tbl[LI0_PUMP_MOTOR_STATUS] &= (~(0x03 << 4)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_BYTE_OFFSET]) >> 0U) & 0xffU))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_BYTE_OFFSET] & 0x00U) | \
    (((A) << 0U) & 0xffU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET); \
    }


 
/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byFocMode */
 
#define l_u8_rd_LI0_PUMP_MOTOR_STATUS_byFocMode() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_BYTE_OFFSET]) >> 0U) & 0x7fU))


#define l_u8_wr_LI0_PUMP_MOTOR_STATUS_byFocMode(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_BYTE_OFFSET] & 0x80U) | \
    (((A) << 0U) & 0x7fU)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PUMP_MOTOR_STATUS_byPwmMode */

 
#define l_bool_rd_LI0_PUMP_MOTOR_STATUS_byPwmMode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BIT_OFFSET))

#define l_bool_wr_LI0_PUMP_MOTOR_STATUS_byPwmMode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BYTE_OFFSET], \
    LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BIT_OFFSET);}


/* Signal flag APIs */

#define l_flg_tst_LI0_TEMP_EAU_CPT_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TEMP_EAU_CPT_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_TEMP_EAU_CPT_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_I_CONSO_CTP_EAU_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_I_CONSO_CTP_EAU_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_I_CONSO_CTP_EAU_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_CTP_EAU_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_CTP_EAU_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_CTP_EAU_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_CTP_EAU_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_CTP_EAU_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_CTP_EAU_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_SECU_CTP_EAU_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_SECU_CTP_EAU_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SECU_CTP_EAU_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESP_ERROR_CTPE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESP_ERROR_CTPE_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESP_ERROR_CTPE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESP_ERROR_CTPE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESP_ERROR_CTPE_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESP_ERROR_CTPE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_INTERLOCK_STATUS_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_INTERLOCK_STATUS_FLAG_BYTE_OFFSET],\
         LIN_LI0_INTERLOCK_STATUS_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_INTERLOCK_STATUS_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_INTERLOCK_STATUS_FLAG_BYTE_OFFSET],\
         LIN_LI0_INTERLOCK_STATUS_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_LIMIT_POWER_HVWH_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_LIMIT_POWER_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_LIMIT_POWER_HVWH_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_LIMIT_POWER_HVWH_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_LIMIT_POWER_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_LIMIT_POWER_HVWH_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERV_2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERV_2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_ALIM_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_ALIM_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_ALIM_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_ALIM_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_ALIM_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_ALIM_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_FONCT_INTEMPESTIF_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_FONCT_INTEMPESTIF_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_FONCT_INTEMPESTIF_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_NON_FONCT_PERM_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_NON_FONCT_PERM_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_NON_FONCT_PERM_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_PROTECTION_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_PROTECTION_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_PROTECTION_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_PROTECTION_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_PROTECTION_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_PROTECTION_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_SONDE_TEMP_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_SONDE_TEMP_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_SONDE_TEMP_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_DEFAUT_TENSION_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_TENSION_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_TENSION_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_DEFAUT_TENSION_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_DEFAUT_TENSION_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_DEFAUT_TENSION_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_TENSION_LV_CTPE_ELEC_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BYTE_OFFSET],\
         LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_TENSION_LV_CTPE_ELEC_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BYTE_OFFSET],\
         LIN_LI0_TENSION_LV_CTPE_ELEC_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERV_9_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_9_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_9_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERV_9_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERV_9_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERV_9_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CMD_CTPE_EAU_BT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CMD_CTPE_EAU_BT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_CTPE_EAU_BT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_COUPURE_CONSO_CPT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_COUPURE_CONSO_CPT_FLAG_BYTE_OFFSET],\
         LIN_LI0_COUPURE_CONSO_CPT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_COUPURE_CONSO_CPT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_COUPURE_CONSO_CPT_FLAG_BYTE_OFFSET],\
         LIN_LI0_COUPURE_CONSO_CPT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CMD_PWR_LIMIT_HVWH_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CMD_PWR_LIMIT_HVWH_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BYTE_OFFSET],\
         LIN_LI0_CMD_PWR_LIMIT_HVWH_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CDE_PV_LIN_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CDE_PV_LIN_FLAG_BYTE_OFFSET],\
         LIN_LI0_CDE_PV_LIN_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CDE_PV_LIN_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CDE_PV_LIN_FLAG_BYTE_OFFSET],\
         LIN_LI0_CDE_PV_LIN_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_8_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_8_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_8_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_8_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_16_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_16_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_16_2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_16_2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_2_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_16_3_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_3_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_3_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_16_3_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_16_3_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_16_3_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CompSpd_Target_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Target_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Target_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CompSpd_Target_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Target_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Target_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_On_Rq_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_On_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_On_Rq_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_On_Rq_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_On_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_On_Rq_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_Fault_Clear_Rq_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_Fault_Clear_Rq_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Fault_Clear_Rq_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_HvInterlock_Rq_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Rq_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_HvInterlock_Rq_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Rq_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_HvDischarge_Rq_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvDischarge_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvDischarge_Rq_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_HvDischarge_Rq_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvDischarge_Rq_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvDischarge_Rq_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CompSpd_Est_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Est_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Est_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CompSpd_Est_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CompSpd_Est_FLAG_BYTE_OFFSET],\
         LIN_LI0_CompSpd_Est_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_HV_InputCurr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_InputCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_InputCurr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_HV_InputCurr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_InputCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_InputCurr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_HV_Volt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_Volt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_Volt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_HV_Volt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_HV_Volt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_HV_Volt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_InvrtTemp_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtTemp_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_InvrtTemp_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtTemp_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtTemp_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_InvrtPhaseCurr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_InvrtPhaseCurr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_InvrtPhaseCurr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_BrdTemp_Lmt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_BrdTemp_Lmt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_BrdTemp_Lmt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_CurrLmt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_CurrLmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_CurrLmt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_CurrLmt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_CurrLmt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_CurrLmt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_HVVolt_Flt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_HVVolt_Flt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_HVVolt_Flt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_Temp_Excess_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_Temp_Excess_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Temp_Excess_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_Comm_Flt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_Comm_Flt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_Comm_Flt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Sp_InvrtPwrSup_Flt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Sp_InvrtPwrSup_Flt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Sp_InvrtPwrSup_Flt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Off_Sens_Flt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Sens_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Sens_Flt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Off_Sens_Flt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Sens_Flt_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Sens_Flt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Off_ShrtCurr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_ShrtCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_ShrtCurr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Off_ShrtCurr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_ShrtCurr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_ShrtCurr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_Off_Stall_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Stall_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Stall_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_Off_Stall_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_Off_Stall_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_Off_Stall_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EAC_RsErr_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_RsErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_RsErr_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EAC_RsErr_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EAC_RsErr_FLAG_BYTE_OFFSET],\
         LIN_LI0_EAC_RsErr_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_HvInterlock_Stat_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Stat_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_HvInterlock_Stat_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_HvInterlock_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_HvInterlock_Stat_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_Comp_Oprtn_Stat_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Oprtn_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Oprtn_Stat_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_Comp_Oprtn_Stat_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_Comp_Oprtn_Stat_FLAG_BYTE_OFFSET],\
         LIN_LI0_Comp_Oprtn_Stat_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_DIAG_FLAG1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_DIAG_FLAG1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_DIAG_FLAG2_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_DIAG_FLAG2_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_DIAG_FLAG2_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_IBATT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_IBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_IBATT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_IBATT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_IBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_IBATT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_ResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_ResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_ROTATION_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_ROTATION_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_ROTATION_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_STATUS_MOTOR_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_STATUS_MOTOR_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_STATUS_MOTOR_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_SUPPLIER_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SUPPLIER_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SUPPLIER_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_SUPPLIER_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SUPPLIER_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SUPPLIER_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_TEMPERATURE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TEMPERATURE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TEMPERATURE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_TEMPERATURE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TEMPERATURE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TEMPERATURE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_TORQUE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TORQUE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TORQUE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_TORQUE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_TORQUE_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_TORQUE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_UBATT_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UBATT_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_UBATT_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UBATT_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UBATT_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_UMOTOR_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UMOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UMOTOR_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_UMOTOR_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_UMOTOR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_UMOTOR_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_CODE_VEHICULE_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_CODE_VEHICULE_FLAG_BYTE_OFFSET],\
         LIN_LI0_CODE_VEHICULE_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_CODE_VEHICULE_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_CODE_VEHICULE_FLAG_BYTE_OFFSET],\
         LIN_LI0_CODE_VEHICULE_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_RAMP_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_RAMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_RAMP_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_RAMP_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_RAMP_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_RAMP_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RX_FREQUENCY_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RX_FREQUENCY_FLAG_BYTE_OFFSET],\
         LIN_LI0_RX_FREQUENCY_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RX_FREQUENCY_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RX_FREQUENCY_FLAG_BYTE_OFFSET],\
         LIN_LI0_RX_FREQUENCY_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_SAFETY_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_SAFETY_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_SAFETY_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_SAFETY_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_SAFETY_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_SAFETY_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BLOWER_SPEED_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SPEED_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BLOWER_SPEED_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BLOWER_SPEED_FLAG_BYTE_OFFSET],\
         LIN_LI0_BLOWER_SPEED_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Position_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Position_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Movement_Status_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Movement_Status_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Movement_Status_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Movement_Status_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Stall_Detect_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Stall_Detect_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Stall_Detect_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Stall_Detect_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Detect_Status_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Detect_Status_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Detect_Status_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Detect_Status_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Communication_Error_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Communication_Error_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Communication_Error_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Communication_Error_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Internal_Fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Internal_Fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Internal_Fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Internal_Fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Protection_fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Protection_fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Protection_fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Protection_fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Voltage_Fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Voltage_Fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Voltage_Fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Voltage_Fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Position_fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Position_fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Position_fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Pressure_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pressure_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Pressure_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pressure_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Temperature_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Temperature_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Temperature_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Temperature_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Pos_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pos_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Pos_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Pos_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Select_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Select_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Select_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Select_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV1_Initial_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Initial_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV1_Initial_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV1_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV1_Initial_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_EXV1_5_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_5_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_EXV1_5_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_5_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_EXV1_8_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_8_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_EXV1_8_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV1_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV1_8_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Position_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Position_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Movement_Status_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Movement_Status_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Movement_Status_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Movement_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Movement_Status_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Stall_Detect_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Stall_Detect_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Stall_Detect_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Stall_Detect_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Stall_Detect_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Detect_Status_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Detect_Status_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Detect_Status_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Detect_Status_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Detect_Status_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Communication_Error_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Communication_Error_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Communication_Error_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Communication_Error_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Communication_Error_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Internal_Fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Internal_Fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Internal_Fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Internal_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Internal_Fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Protection_fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Protection_fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Protection_fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Protection_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Protection_fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Voltage_Fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Voltage_Fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Voltage_Fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Voltage_Fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Voltage_Fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Position_fault_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_fault_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Position_fault_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Position_fault_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Position_fault_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Pressure_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pressure_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Pressure_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pressure_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pressure_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Temperature_Feedback_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Temperature_Feedback_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Temperature_Feedback_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Temperature_Feedback_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Temperature_Feedback_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Pos_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pos_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Pos_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Pos_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Pos_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Select_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Select_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Select_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Select_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Select_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_EXV2_Initial_Cmd_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Initial_Cmd_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_EXV2_Initial_Cmd_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_EXV2_Initial_Cmd_FLAG_BYTE_OFFSET],\
         LIN_LI0_EXV2_Initial_Cmd_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_EXV2_5_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_5_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_EXV2_5_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_5_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_5_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_RESERVE_EXV2_8_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_8_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_RESERVE_EXV2_8_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_RESERVE_EXV2_8_FLAG_BYTE_OFFSET],\
         LIN_LI0_RESERVE_EXV2_8_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_PosSet_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_PosSet_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_PosSet_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_PosSet_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_ReqMotorEmgyStop_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_ReqMotorEmgyStop_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_ReqMotorOptRecovery_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_ReqMotorOptRecovery_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_RESP_ERROR_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_RESP_ERROR_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RESP_ERROR_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_OverCurrent_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_OverCurrent_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverCurrent_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_OverTempFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_OverTempFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_OverTempFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_UnderVoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_UnderVoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_InitSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_InitSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_InitSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_InitSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_CCWFlg_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_CCWFlg_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_CCWFlg_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_MotorSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MotorSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_MotorSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_MotorSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_HVAC_TWV_RealSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RealSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_HVAC_TWV_RealSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_HVAC_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_HVAC_TWV_RealSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_PosSet_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_PosSet_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_PosSet_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_PosSet_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_ReqMotorEmgyStop_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_ReqMotorEmgyStop_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_ReqMotorOptRecovery_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_ReqMotorOptRecovery_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_RESP_ERROR_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_RESP_ERROR_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RESP_ERROR_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_OverCurrent_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverCurrent_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_OverCurrent_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverCurrent_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_OverTempFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_OverTempFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_OverTempFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_UnderVoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_UnderVoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_InitSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_InitSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_InitSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_InitSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_CCWFlg_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_CCWFlg_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_CCWFlg_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_CCWFlg_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_MotorSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MotorSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_MotorSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_MotorSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BAT_TWV_RealSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RealSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BAT_TWV_RealSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BAT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_BAT_TWV_RealSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_PosSet_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_PosSet_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_PosSet_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_PosSet_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_PosSet_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_MoveEnable_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MoveEnable_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_MoveEnable_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MoveEnable_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MoveEnable_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_ReqMotorEmgyStop_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_ReqMotorEmgyStop_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorEmgyStop_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_ReqMotorOptRecovery_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_ReqMotorOptRecovery_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_ReqMotorOptRecovery_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_RESP_ERROR_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_RESP_ERROR_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RESP_ERROR_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_HVAC_TWV_OvervoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_HVAC_TWV_OvervoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_OverCurrent_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverCurrent_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_OverCurrent_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverCurrent_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverCurrent_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_OverTempFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_OverTempFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_OverTempFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_UnderVoltageFlt_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_UnderVoltageFlt_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_UnderVoltageFlt_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_InitSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_InitSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_InitSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_InitSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_InitSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_CCWFlg_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_CCWFlg_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_CCWFlg_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_CCWFlg_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_CCWFlg_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_MotorSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MotorSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_MotorSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_MotorSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_MotorSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_MOT_TWV_RealSta_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RealSta_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_MOT_TWV_RealSta_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_MOT_TWV_RealSta_FLAG_BYTE_OFFSET],\
         LIN_LI0_MOT_TWV_RealSta_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byNAD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byNAD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byNAD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byProgram_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byProgram_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byProgram_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byStallDetector_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byStallDetector_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStallDetector_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byClearEventFlags_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byClearEventFlags_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byTargetSpeed_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byTargetSpeed_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byReserved4_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byReserved4_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved4_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byReserved5_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byReserved5_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved5_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byReserved6_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byReserved6_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved6_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byReserved7_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byReserved7_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byReserved7_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_CTRL_byStopMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_CTRL_byStopMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_CTRL_byStopMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byReserved1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byReserved1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReserved1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byOverTemperature_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byOverTemperature_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byOverTemperature_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byElectricDefect_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byElectricDefect_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byElectricDefect_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byVoltageError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byVoltageError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byVoltageError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_bySpeedError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_bySpeedError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byStallOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byStallOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byStallOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_bySpeedStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_bySpeedStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byActualLA_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byActualLA_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualLA_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byFocMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byFocMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byFocMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_HVAC_STATUS_byPwmMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_HVAC_STATUS_byPwmMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_HVAC_STATUS_byPwmMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byNAD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byNAD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byNAD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byProgram_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byProgram_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byProgram_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byStallDetector_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byStallDetector_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStallDetector_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byClearEventFlags_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byClearEventFlags_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byTargetSpeed_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byTargetSpeed_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byReserved4_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byReserved4_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved4_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byReserved5_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byReserved5_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved5_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byReserved6_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byReserved6_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved6_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byReserved7_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byReserved7_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byReserved7_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_CTRL_byStopMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_CTRL_byStopMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_CTRL_byStopMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byReserved1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byReserved1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReserved1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byOverTemperature_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byOverTemperature_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byOverTemperature_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byElectricDefect_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byElectricDefect_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byElectricDefect_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byVoltageError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byVoltageError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byVoltageError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_bySpeedError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_bySpeedError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byStallOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byStallOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byStallOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_bySpeedStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_bySpeedStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byActualLA_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byActualLA_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualLA_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byFocMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byFocMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byFocMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_BAT_STATUS_byPwmMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_BAT_STATUS_byPwmMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_BAT_STATUS_byPwmMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byNAD_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byNAD_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byNAD_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byProgram_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byProgram_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byProgram_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byStallDetector_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byStallDetector_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStallDetector_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byClearEventFlags_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byTargetSpeed_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byReserved4_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byReserved4_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved4_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byReserved5_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byReserved5_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved5_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byReserved6_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byReserved6_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved6_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byReserved7_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byReserved7_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byReserved7_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_CTRL_byStopMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_CTRL_byStopMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_CTRL_byStopMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byReserved1_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byReserved1_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReserved1_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byOverTemperature_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byOverTemperature_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byOverTemperature_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byElectricDefect_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byElectricDefect_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byElectricDefect_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byVoltageError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byVoltageError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byVoltageError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byEmergencyOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_bySpeedError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_bySpeedError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byStallOccurred_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byStallOccurred_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byStallOccurred_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byReset_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byReset_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byReset_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_bySpeedStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byActualLA_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byActualLA_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualLA_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byActualMotorVoltage_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byFocMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byFocMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byFocMode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PUMP_MOTOR_STATUS_byPwmMode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PUMP_MOTOR_STATUS_byPwmMode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PUMP_MOTOR_STATUS_byPwmMode_FLAG_BIT_OFFSET)



/* Frame flag APIs */

   /* Interface_name = LI0 */

 #define l_flg_tst_LI0_HVWH_SET_1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_SET_1]
 #define l_flg_clr_LI0_HVWH_SET_1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_SET_1] = 0

 #define l_flg_tst_LI0_HVWH_SET_2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_SET_2]
 #define l_flg_clr_LI0_HVWH_SET_2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_SET_2] = 0

 #define l_flg_tst_LI0_HVWH_LIN_STATUS1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_LIN_STATUS1]
 #define l_flg_clr_LI0_HVWH_LIN_STATUS1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_HVWH_LIN_STATUS1] = 0

 #define l_flg_tst_LI0_EAC_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EAC_Cmd]
 #define l_flg_clr_LI0_EAC_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EAC_Cmd] = 0

 #define l_flg_tst_LI0_EAC_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EAC_Status]
 #define l_flg_clr_LI0_EAC_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EAC_Status] = 0

 #define l_flg_tst_LI0_BLW_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Cmd]
 #define l_flg_clr_LI0_BLW_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Cmd] = 0

 #define l_flg_tst_LI0_BLW_Status1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Status1]
 #define l_flg_clr_LI0_BLW_Status1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Status1] = 0

 #define l_flg_tst_LI0_BLW_Status2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Status2]
 #define l_flg_clr_LI0_BLW_Status2_flag() \
          g_lin_frame_flag_handle_tbl[LI0_BLW_Status2] = 0

 #define l_flg_tst_LI0_EXV_CHILLER_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_CHILLER_Cmd]
 #define l_flg_clr_LI0_EXV_CHILLER_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_CHILLER_Cmd] = 0

 #define l_flg_tst_LI0_EXV_CHILLER_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_CHILLER_Status]
 #define l_flg_clr_LI0_EXV_CHILLER_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_CHILLER_Status] = 0

 #define l_flg_tst_LI0_EXV_EVAP_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_EVAP_Cmd]
 #define l_flg_clr_LI0_EXV_EVAP_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_EVAP_Cmd] = 0

 #define l_flg_tst_LI0_EXV_EVAP_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_EVAP_Status]
 #define l_flg_clr_LI0_EXV_EVAP_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_EXV_EVAP_Status] = 0

 #define l_flg_tst_LI0_TWV_HVAC_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_HVAC_Cmd]
 #define l_flg_clr_LI0_TWV_HVAC_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_HVAC_Cmd] = 0

 #define l_flg_tst_LI0_TWV_HVAC_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_HVAC_Status]
 #define l_flg_clr_LI0_TWV_HVAC_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_HVAC_Status] = 0

 #define l_flg_tst_LI0_TWV_BAT_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_BAT_Cmd]
 #define l_flg_clr_LI0_TWV_BAT_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_BAT_Cmd] = 0

 #define l_flg_tst_LI0_TWV_BAT_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_BAT_Status]
 #define l_flg_clr_LI0_TWV_BAT_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_BAT_Status] = 0

 #define l_flg_tst_LI0_TWV_MOTOR_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_MOTOR_Cmd]
 #define l_flg_clr_LI0_TWV_MOTOR_Cmd_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_MOTOR_Cmd] = 0

 #define l_flg_tst_LI0_TWV_MOTOR_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_MOTOR_Status]
 #define l_flg_clr_LI0_TWV_MOTOR_Status_flag() \
          g_lin_frame_flag_handle_tbl[LI0_TWV_MOTOR_Status] = 0

 #define l_flg_tst_LI0_PUMP_HVAC_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_HVAC_CTRL]
 #define l_flg_clr_LI0_PUMP_HVAC_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_HVAC_CTRL] = 0

 #define l_flg_tst_LI0_PUMP_HVAC_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_HVAC_STATUS]
 #define l_flg_clr_LI0_PUMP_HVAC_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_HVAC_STATUS] = 0

 #define l_flg_tst_LI0_PUMP_BAT_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_BAT_CTRL]
 #define l_flg_clr_LI0_PUMP_BAT_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_BAT_CTRL] = 0

 #define l_flg_tst_LI0_PUMP_BAT_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_BAT_STATUS]
 #define l_flg_clr_LI0_PUMP_BAT_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_BAT_STATUS] = 0

 #define l_flg_tst_LI0_PUMP_MOTOR_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_MOTOR_CTRL]
 #define l_flg_clr_LI0_PUMP_MOTOR_CTRL_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_MOTOR_CTRL] = 0

 #define l_flg_tst_LI0_PUMP_MOTOR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_MOTOR_STATUS]
 #define l_flg_clr_LI0_PUMP_MOTOR_STATUS_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PUMP_MOTOR_STATUS] = 0

 #define l_flg_tst_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq]
 #define l_flg_clr_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq] = 0

 #define l_flg_tst_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp]
 #define l_flg_clr_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp] = 0


/* SCHEDULE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_tick_interface
 * Description   : This static function call to dynamic function l_sch_tick()
 *
 * Implements    : l_sch_tick_interface_Class
 *END**************************************************************************/

#define l_sch_tick_LI0() l_sch_tick(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_sch_set_interface
 * Description   : This static function call to dynamic function l_sch_set()
 *
 * Implements    : l_sch_set_interface_Class
 *END**************************************************************************/

#define l_sch_set_LI0(schedule, entry) l_sch_set(LI0, schedule, entry)

/* INTERFACE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_init_interface
 * Description   : This static function call to dynamic function l_ifc_init()
 *
 * Implements    : l_ifc_init_interface_Class
 *END**************************************************************************/

#define l_ifc_init_LI0() l_ifc_init(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_goto_sleep_interface
 * Description   : This static function call to dynamic function l_ifc_goto_sleep()
 *
 * Implements    : l_ifc_goto_sleep_interface_Class
 *END**************************************************************************/

#define l_ifc_goto_sleep_LI0() l_ifc_goto_sleep(LI0)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_wake_up_interface
 * Description   : This static function call to dynamic function l_ifc_wake_up()
 *
 * Implements    : l_ifc_wake_up_interface_Class
 *END**************************************************************************/

#define l_ifc_wake_up_LI0() l_ifc_wake_up(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_read_status_interface
 * Description   : This static function call to dynamic function l_ifc_read_status()
 *
 * Implements    : l_ifc_read_status_interface_Class
 *END**************************************************************************/

#define l_ifc_read_status_LI0() l_ifc_read_status(LI0)





#define LI0_DIAG_NUMBER_OF_SERVICES     6U

#define LI0_DIAGSRV_ASSIGN_NAD_ORDER       0U
#define LI0_DIAGSRV_READ_BY_IDENTIFIER_ORDER       1U
#define LI0_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       2U
#define LI0_DIAGSRV_DATA_DUMP_ORDER       3U
#define LI0_DIAGSRV_SAVE_CONFIGURATION_ORDER       4U
#define LI0_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       5U

#define MAX_LENGTH_SERVICE 6




#endif    /* _LIN_CFG_H_ */
